import { ACEExtension } from '@alexa-games/sfb-f';
import { ConfigAccessor } from '../configAccessor';

import * as fs from 'fs';
import * as path from 'path';

type ACEExtensionType = ACEExtension.InstructionExtension|ACEExtension.DriverExtension|ACEExtension.ImporterExtension;

export class CoreExtensionLoader {    
    voiceOverExtension: ACEExtension.VoiceOverExtension;
    globalSceneExtension: ACEExtension.GlobalDirectionsExtension;
    snippetExtension: ACEExtension.SnippetExtension | undefined;
    localizationExtension: ACEExtension.LocalizationExtension;

    constructor(locale: string = 'en-US', configAccessor: ConfigAccessor, param: any = {}) {
        const contentDir: string = param.contentDir;

        const S3_DOMAIN_NAME : string = configAccessor.getValue("s3-domain-name", undefined, locale);

        const S3_BUCKET_NAME : string = configAccessor.getValue("s3-bucket-name", undefined, locale);

        const SNIPPET_MAP_FILEPATH: string = path.join(contentDir, configAccessor.getValue("snippet-map-filename", undefined, locale));

        const ASK_SKILL_DIRECTORY_NAME = configAccessor.getValue("ask-skill-directory-name", undefined, locale);

        const OVERWRITE_WITH_SOURCE = configAccessor.getValue("update-string-with-source", undefined, locale);

        const snippets: any = param.snippets;

        const s3ResourcesUri = `https://${S3_DOMAIN_NAME}/${S3_BUCKET_NAME}/${ASK_SKILL_DIRECTORY_NAME}/${locale}`;

        this.voiceOverExtension = new ACEExtension.VoiceOverExtension(`${s3ResourcesUri}/vo/{{file_name}}`);
        
        let globalSceneExceptions: string[] = []; // list of scene names which should not have the global scene applied.

        this.globalSceneExtension = new ACEExtension.GlobalDirectionsExtension(globalSceneExceptions);

        // Can be passed in to use language strings from memory instead of loading from disk
        let languageStrings: any = param.languageStrings || {};

        if(!param.languageStrings) {
            let languageStringPath = path.join(contentDir, "..", "languageStrings.json");
            if (!fs.existsSync(languageStringPath)) {
                languageStringPath = path.join(contentDir, "..", "..", "languageStrings.json");
            }

            if (fs.existsSync(languageStringPath)) {
                try {
                    languageStrings = require(languageStringPath);
                } catch (err) {

                }
            }
        }
        
        this.localizationExtension = new ACEExtension.LocalizationExtension(locale, languageStrings, OVERWRITE_WITH_SOURCE);

        if(snippets) {
            this.snippetExtension = new ACEExtension.SnippetExtension(snippets, s3ResourcesUri);
        } else if (!fs.existsSync(SNIPPET_MAP_FILEPATH)) {
            console.warn(`[WARN] Snippet config '${SNIPPET_MAP_FILEPATH}' cannot be found.`);
        } else {
            try {
                let snippetMap: any = require(SNIPPET_MAP_FILEPATH);

                this.snippetExtension = new ACEExtension.SnippetExtension(snippetMap, s3ResourcesUri);
            } catch(err) {
                console.warn(`[WARN] Badly formed JSON : Snippet config '${SNIPPET_MAP_FILEPATH}' could not be opened.`);
            }
        }
    }

    public getImportExtensions(): ACEExtensionType[] {
        let importExtensions: ACEExtensionType[] = [
            this.voiceOverExtension,
            this.globalSceneExtension,
            this.localizationExtension
        ];

        if (this.snippetExtension) {
            importExtensions.push(this.snippetExtension)
        }

        return importExtensions;
    }

    public getDriverExtensions(): ACEExtensionType[] {
        let driverExtensions: ACEExtensionType[] = [
        ];

        return driverExtensions;
    }
}