import { HandlerInput } from 'ask-sdk-core';
import { VisualOptions } from '@alexa-games/sfb-f';
import { ConfigAccessor } from '../configAccessor';

import * as path from 'path';
import * as fs from 'fs';

export class APLHelper {
    private templates: any;

    constructor(private locale: string = "en-US", private configAccessor: ConfigAccessor) {
        const aplTemplatePath = path.resolve(this.configAccessor.getResourcePath(this.locale), this.configAccessor.getValue("apl-templates-filename", undefined, this.locale));
        if (!fs.existsSync(aplTemplatePath)) {
            throw `Could not find the required APL template configuration in '${aplTemplatePath}'`;
        }

        try {
            this.templates = JSON.parse(fs.readFileSync(
                aplTemplatePath,
                "utf8"
            ));
        } catch(err) {
            throw `There was a problem while parsing the APL template configuration.\n${err}`;
        }
    }

    supportsDisplay(handlerInput: HandlerInput) {
        return handlerInput.requestEnvelope.context &&
          handlerInput.requestEnvelope.context.System &&
          handlerInput.requestEnvelope.context.System.device &&
          handlerInput.requestEnvelope.context.System.device.supportedInterfaces &&
          (handlerInput.requestEnvelope.context.System.device.supportedInterfaces['Alexa.Presentation.APL'] ||
            handlerInput.requestEnvelope.context.System.device.supportedInterfaces.Display) &&
          handlerInput.requestEnvelope.context.Viewport
    }
      
    generateAPLDirectiveWithVisualOptions(visualProperties: VisualOptions[]): any[] {
        let templateName: string = "default";
        if (visualProperties[0] && visualProperties[0].template) {
            templateName = visualProperties[0].template
        }

        // no slide show support yet. show the first page only
        let aplTemplate: any = this.templates[templateName];

        aplTemplate.datasources.visualProperties = Object.assign(aplTemplate.datasources.visualProperties, visualProperties[0]);

        return [
            aplTemplate
        ];
    }
}