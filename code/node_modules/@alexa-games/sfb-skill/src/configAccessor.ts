declare var require: any
declare var process: any

import * as path from 'path';
import * as fs from 'fs';

const _ = require('lodash');

export class ConfigAccessor {

    static defaultStage = "dev";
    static defaultLocale = "en-us";

    private resourcePath: string;

    constructor(private abcConfig: any, resourcePath: string = ".") {
        this.resourcePath = path.resolve(resourcePath);
    }

    setValue(keyName : string, val: any, stage? : string, locale? : string) : void {

        // Force stage and locate to lowercase
        stage = (stage) ? stage.toLowerCase() : stage;
        locale = (locale) ? locale.toLowerCase() : locale;

        if(stage && locale) {
            _.set(this.abcConfig, stage + "-" + locale + "." + keyName, val);
            return;
        } 

        if(stage) {
            _.set(this.abcConfig, stage + "." + keyName, val);
            return;
        }

        if(locale) {
            _.set(this.abcConfig, locale + "." + keyName, val);
            return;
        }

        _.set(this.abcConfig, "default." + keyName, val);
        return;
    }

    public get askSkillDirectoryName() {
        return this.getValue("ask-skill-directory-name");
    }

    public get validResourceFileExtensions(): string[] {
        return this.getValue("valid-resource-file-extensions") || ["json", "csv"];
    }

    public get publishLocales(): string[] {
        return this.getValue("publish-locales");
    }

    public getResourcePath(locale: string) {

        // TODO: Cache this result?
        const resourcesPathWithLocaleAndResources = path.resolve(this.resourcePath, locale, "resources");
        if(fs.existsSync(resourcesPathWithLocaleAndResources)) {
            return resourcesPathWithLocaleAndResources;
        }

        return path.resolve(this.resourcePath, locale);
    }

    getValue(keyName : string, stage? : string, locale? : string, skipLocaleMapping? : boolean, skillId? : string) : any {

        // Force stage and locate to lowercase
        stage = (stage) ? stage.toLowerCase() : stage;
        locale = (locale) ? locale.toLowerCase() : locale;
        
        // If not specified, check for an environment variable and use it
        if(!stage) {
            stage = process.env.stage;
            //console.log("Getting environment variable from: " +  JSON.stringify(process.env) );
        }

        if(!locale) {
            locale = process.env.locale;
        }

        // If still not specified, use a default value
        if(!stage) {
            stage = ConfigAccessor.defaultStage;
        }

        if(!locale) {
            locale = ConfigAccessor.defaultLocale;
        }

        let mappedLocaleToUse = locale;
        /*
        // First map from given locale to mappedLocaleToUse
        if(!skipLocaleMapping) {
            // Need to make sure to set skipLocaleMapping to true to avoid a forever recursive loop
            mappedLocaleToUse = ConfigHelper.getValue("localeToUse", stage, locale, true);
        }*/

        let val : any = undefined;

        // If skillId set, then try and lookup by it first
        if(skillId) {
            val = _.get(this.abcConfig, [skillId, keyName]);  // Don't use a string, because skill id includes dots, so instead use the lodash get array syntax
            if(val) { return val; }                
        }

        // First lookup by stage and mappedLocaleToUse
        val = _.get(this.abcConfig, stage + "-" + mappedLocaleToUse + "." + keyName);
        if(val) { return val; }

        // Then lookup by stage
        val = _.get(this.abcConfig, stage + "." + keyName);
        if(val) { return val; }

        // Then lookup by mappedLocaleToUse
        val = _.get(this.abcConfig, mappedLocaleToUse + "." + keyName);
        if(val) { return val; }

        // Then lookup by default
        val = _.get(this.abcConfig, "default." + keyName);
        if(val) { return val; }
        
        return val;
    }

    public getRequestLocalizedValue(keyName : string, event : any) {
        let locale = _.get(event, "request.locale");
        let skillId = _.get(event, "session.application.applicationId");
        //console.log("[DEBUG] ConfigHelper: getRequestLocalizedValue : Request locale=[ " + locale + "], SkillId=[" + skillId + "]");

        return this.getValue(keyName, undefined, locale, false, skillId);
    }

    public static loadConfigFile(configFile: string, storyPath?: string): Promise<ConfigAccessor> {
        return new Promise((resolve, reject) => {
            fs.readFile(configFile, 'utf8', function (err: any, data: string) {
                if (err) {
                    reject(err);
                    return;
                }
    
                resolve(new ConfigAccessor(JSON.parse(data), storyPath));
            });
        }); 
    }
}
