"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const _ = require('lodash');
class ConfigAccessor {
    constructor(abcConfig, resourcePath = ".") {
        this.abcConfig = abcConfig;
        this.resourcePath = path.resolve(resourcePath);
    }
    setValue(keyName, val, stage, locale) {
        stage = (stage) ? stage.toLowerCase() : stage;
        locale = (locale) ? locale.toLowerCase() : locale;
        if (stage && locale) {
            _.set(this.abcConfig, stage + "-" + locale + "." + keyName, val);
            return;
        }
        if (stage) {
            _.set(this.abcConfig, stage + "." + keyName, val);
            return;
        }
        if (locale) {
            _.set(this.abcConfig, locale + "." + keyName, val);
            return;
        }
        _.set(this.abcConfig, "default." + keyName, val);
        return;
    }
    get askSkillDirectoryName() {
        return this.getValue("ask-skill-directory-name");
    }
    get validResourceFileExtensions() {
        return this.getValue("valid-resource-file-extensions") || ["json", "csv"];
    }
    get publishLocales() {
        return this.getValue("publish-locales");
    }
    getResourcePath(locale) {
        const resourcesPathWithLocaleAndResources = path.resolve(this.resourcePath, locale, "resources");
        if (fs.existsSync(resourcesPathWithLocaleAndResources)) {
            return resourcesPathWithLocaleAndResources;
        }
        return path.resolve(this.resourcePath, locale);
    }
    getValue(keyName, stage, locale, skipLocaleMapping, skillId) {
        stage = (stage) ? stage.toLowerCase() : stage;
        locale = (locale) ? locale.toLowerCase() : locale;
        if (!stage) {
            stage = process.env.stage;
        }
        if (!locale) {
            locale = process.env.locale;
        }
        if (!stage) {
            stage = ConfigAccessor.defaultStage;
        }
        if (!locale) {
            locale = ConfigAccessor.defaultLocale;
        }
        let mappedLocaleToUse = locale;
        let val = undefined;
        if (skillId) {
            val = _.get(this.abcConfig, [skillId, keyName]);
            if (val) {
                return val;
            }
        }
        val = _.get(this.abcConfig, stage + "-" + mappedLocaleToUse + "." + keyName);
        if (val) {
            return val;
        }
        val = _.get(this.abcConfig, stage + "." + keyName);
        if (val) {
            return val;
        }
        val = _.get(this.abcConfig, mappedLocaleToUse + "." + keyName);
        if (val) {
            return val;
        }
        val = _.get(this.abcConfig, "default." + keyName);
        if (val) {
            return val;
        }
        return val;
    }
    getRequestLocalizedValue(keyName, event) {
        let locale = _.get(event, "request.locale");
        let skillId = _.get(event, "session.application.applicationId");
        return this.getValue(keyName, undefined, locale, false, skillId);
    }
    static loadConfigFile(configFile, storyPath) {
        return new Promise((resolve, reject) => {
            fs.readFile(configFile, 'utf8', function (err, data) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(new ConfigAccessor(JSON.parse(data), storyPath));
            });
        });
    }
}
ConfigAccessor.defaultStage = "dev";
ConfigAccessor.defaultLocale = "en-us";
exports.ConfigAccessor = ConfigAccessor;
//# sourceMappingURL=configAccessor.js.map