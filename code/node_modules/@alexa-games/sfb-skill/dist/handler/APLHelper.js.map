{"version":3,"file":"APLHelper.js","sourceRoot":"","sources":["../../src/handler/APLHelper.ts"],"names":[],"mappings":";;;;;;;;;AAIA,2CAA6B;AAC7B,uCAAyB;AAEzB,MAAa,SAAS;IAGlB,YAAoB,SAAiB,OAAO,EAAU,cAA8B;QAAhE,WAAM,GAAN,MAAM,CAAkB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAChF,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,wBAAwB,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACvK,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YACjC,MAAM,8DAA8D,eAAe,GAAG,CAAC;SAC1F;QAED,IAAI;YACA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CACvC,eAAe,EACf,MAAM,CACT,CAAC,CAAC;SACN;QAAC,OAAM,GAAG,EAAE;YACT,MAAM,sEAAsE,GAAG,EAAE,CAAC;SACrF;IACL,CAAC;IAED,eAAe,CAAC,YAA0B;QACtC,OAAO,YAAY,CAAC,eAAe,CAAC,OAAO;YACzC,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM;YAC3C,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM;YAClD,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB;YACtE,CAAC,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,wBAAwB,CAAC;gBAC/F,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACjF,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAA;IACnD,CAAC;IAED,qCAAqC,CAAC,gBAAiC;QACnE,IAAI,YAAY,GAAW,SAAS,CAAC;QACrC,IAAI,gBAAgB,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;YACrD,YAAY,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAA;SAC9C;QAGD,IAAI,WAAW,GAAQ,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAEpD,WAAW,CAAC,WAAW,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;QAExH,OAAO;YACH,WAAW;SACd,CAAC;IACN,CAAC;CACJ;AA5CD,8BA4CC","sourcesContent":["import { HandlerInput } from 'ask-sdk-core';\nimport { VisualOptions } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from '../configAccessor';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport class APLHelper {\n    private templates: any;\n\n    constructor(private locale: string = \"en-US\", private configAccessor: ConfigAccessor) {\n        const aplTemplatePath = path.resolve(this.configAccessor.getResourcePath(this.locale), this.configAccessor.getValue(\"apl-templates-filename\", undefined, this.locale));\n        if (!fs.existsSync(aplTemplatePath)) {\n            throw `Could not find the required APL template configuration in '${aplTemplatePath}'`;\n        }\n\n        try {\n            this.templates = JSON.parse(fs.readFileSync(\n                aplTemplatePath,\n                \"utf8\"\n            ));\n        } catch(err) {\n            throw `There was a problem while parsing the APL template configuration.\\n${err}`;\n        }\n    }\n\n    supportsDisplay(handlerInput: HandlerInput) {\n        return handlerInput.requestEnvelope.context &&\n          handlerInput.requestEnvelope.context.System &&\n          handlerInput.requestEnvelope.context.System.device &&\n          handlerInput.requestEnvelope.context.System.device.supportedInterfaces &&\n          (handlerInput.requestEnvelope.context.System.device.supportedInterfaces['Alexa.Presentation.APL'] ||\n            handlerInput.requestEnvelope.context.System.device.supportedInterfaces.Display) &&\n          handlerInput.requestEnvelope.context.Viewport\n    }\n      \n    generateAPLDirectiveWithVisualOptions(visualProperties: VisualOptions[]): any[] {\n        let templateName: string = \"default\";\n        if (visualProperties[0] && visualProperties[0].template) {\n            templateName = visualProperties[0].template\n        }\n\n        // no slide show support yet. show the first page only\n        let aplTemplate: any = this.templates[templateName];\n\n        aplTemplate.datasources.visualProperties = Object.assign(aplTemplate.datasources.visualProperties, visualProperties[0]);\n\n        return [\n            aplTemplate\n        ];\n    }\n}"]}