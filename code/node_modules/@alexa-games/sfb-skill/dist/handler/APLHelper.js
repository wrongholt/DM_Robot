"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
class APLHelper {
    constructor(locale = "en-US", configAccessor) {
        this.locale = locale;
        this.configAccessor = configAccessor;
        const aplTemplatePath = path.resolve(this.configAccessor.getResourcePath(this.locale), this.configAccessor.getValue("apl-templates-filename", undefined, this.locale));
        if (!fs.existsSync(aplTemplatePath)) {
            throw `Could not find the required APL template configuration in '${aplTemplatePath}'`;
        }
        try {
            this.templates = JSON.parse(fs.readFileSync(aplTemplatePath, "utf8"));
        }
        catch (err) {
            throw `There was a problem while parsing the APL template configuration.\n${err}`;
        }
    }
    supportsDisplay(handlerInput) {
        return handlerInput.requestEnvelope.context &&
            handlerInput.requestEnvelope.context.System &&
            handlerInput.requestEnvelope.context.System.device &&
            handlerInput.requestEnvelope.context.System.device.supportedInterfaces &&
            (handlerInput.requestEnvelope.context.System.device.supportedInterfaces['Alexa.Presentation.APL'] ||
                handlerInput.requestEnvelope.context.System.device.supportedInterfaces.Display) &&
            handlerInput.requestEnvelope.context.Viewport;
    }
    generateAPLDirectiveWithVisualOptions(visualProperties) {
        let templateName = "default";
        if (visualProperties[0] && visualProperties[0].template) {
            templateName = visualProperties[0].template;
        }
        let aplTemplate = this.templates[templateName];
        aplTemplate.datasources.visualProperties = Object.assign(aplTemplate.datasources.visualProperties, visualProperties[0]);
        return [
            aplTemplate
        ];
    }
}
exports.APLHelper = APLHelper;
//# sourceMappingURL=APLHelper.js.map