"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const sfb_f_1 = require("@alexa-games/sfb-f");
const CoreExtensionLoader_1 = require("./CoreExtensionLoader");
const path = __importStar(require("path"));
class SFBRequestHandler {
    constructor(config, customExtensions, configAccessor, projectDir) {
        this.config = config;
        this.customExtensions = customExtensions;
        this.configAccessor = configAccessor;
        this.projectDir = projectDir;
    }
    canHandle(handlerInput) {
        return true;
    }
    getTableName() {
        return this.config.attributeTableName;
    }
    async handle(handlerInput) {
        const storyData = this.config.story;
        let gameState;
        try {
            gameState = await handlerInput.attributesManager.getPersistentAttributes();
        }
        catch (error) {
            return this.buildPersistentAttributeErrorResponse(error, handlerInput);
        }
        let customImportPlugins = [];
        let extensionLoader = new CoreExtensionLoader_1.CoreExtensionLoader(this.config.locale, this.configAccessor, {
            contentDir: path.resolve(this.projectDir, "res", this.config.locale),
            handlerInput: handlerInput
        });
        const customExtensions = this.customExtensions.concat(extensionLoader.getDriverExtensions());
        let userInput = {
            handlerInput: handlerInput
        };
        let storyDriver = new sfb_f_1.ACEDriver(storyData, customImportPlugins, customExtensions, this.config.pollyVoiceConfig, this.config.locale);
        const NARRATOR = this.config.defaultVoiceConfig;
        if (NARRATOR && this.config.defaultVoiceConfig.enabled) {
            storyDriver.configureDefaultPollyNarrator(NARRATOR.name, NARRATOR.pitch, NARRATOR.rate, NARRATOR.volume);
            storyDriver.turnOnDefaultPolly();
        }
        else {
            storyDriver.turnOffDefaultPolly();
        }
        let exitingIntents = this.isPausingRequest(handlerInput);
        let stopChoice = sfb_f_1.StoryStateHelper.getChoiceByUserInput(gameState, userInput, this.config.locale);
        if (exitingIntents && (stopChoice == null || stopChoice.utterances.includes("*"))) {
            await storyDriver.pauseStory(userInput, gameState);
        }
        else {
            await storyDriver.resumeStory(userInput, gameState);
        }
        handlerInput.attributesManager.setPersistentAttributes(storyDriver.getCurrentStoryState());
        await handlerInput.attributesManager.savePersistentAttributes();
        const response = handlerInput.responseBuilder.getResponse();
        if (response.directives) {
            for (let directive of response.directives) {
                if (directive.type === "Connections.SendRequest") {
                    response.shouldEndSession = true;
                    break;
                }
            }
        }
        if (response.shouldEndSession && response.reprompt) {
            delete response.reprompt;
        }
        return response;
    }
    isPausingRequest(handlerInput) {
        if (handlerInput.requestEnvelope.request.type === "SessionEndedRequest") {
            return true;
        }
        if (handlerInput.requestEnvelope.request.type === 'IntentRequest') {
            const intent = handlerInput.requestEnvelope.request.intent.name;
            return intent == "SessionEndedRequest" || intent == "AMAZON.StopIntent" || intent == "AMAZON.PauseIntent" || intent == "AMAZON.CancelIntent";
        }
        return false;
    }
    buildPersistentAttributeErrorResponse(error, handlerInput) {
        let err = error.toString();
        if (err.match(new RegExp("is not authorized to perform", "gi")) != null) {
            return handlerInput.responseBuilder
                .speak("Could not create or access your DynamoDB Table. Please verify that your IAM role has a Full Access permission to use DynamoDB.")
                .getResponse();
        }
        else if (err.match(new RegExp("Requested resource not found", "gi")) != null) {
            return handlerInput.responseBuilder
                .speak("A DynamoDB Table for this skill is being created. Please try again in 5 minutes.")
                .getResponse();
        }
        else {
            return handlerInput.responseBuilder
                .speak("Something went wrong while loading your progress. Try again later, and if the problem persists please contact the skill publisher.")
                .getResponse();
        }
    }
}
exports.SFBRequestHandler = SFBRequestHandler;
//# sourceMappingURL=AlexaSFBRequestHandler.js.map