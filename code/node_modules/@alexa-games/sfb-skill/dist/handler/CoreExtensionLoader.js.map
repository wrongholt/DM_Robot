{"version":3,"file":"CoreExtensionLoader.js","sourceRoot":"","sources":["../../src/handler/CoreExtensionLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { ACEExtension } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from '../configAccessor';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ntype ACEExtensionType = ACEExtension.InstructionExtension|ACEExtension.DriverExtension|ACEExtension.ImporterExtension;\n\nexport class CoreExtensionLoader {    \n    voiceOverExtension: ACEExtension.VoiceOverExtension;\n    globalSceneExtension: ACEExtension.GlobalDirectionsExtension;\n    snippetExtension: ACEExtension.SnippetExtension | undefined;\n    localizationExtension: ACEExtension.LocalizationExtension;\n\n    constructor(locale: string = 'en-US', configAccessor: ConfigAccessor, param: any = {}) {\n        const contentDir: string = param.contentDir;\n\n        const S3_DOMAIN_NAME : string = configAccessor.getValue(\"s3-domain-name\", undefined, locale);\n\n        const S3_BUCKET_NAME : string = configAccessor.getValue(\"s3-bucket-name\", undefined, locale);\n\n        const SNIPPET_MAP_FILEPATH: string = path.join(contentDir, configAccessor.getValue(\"snippet-map-filename\", undefined, locale));\n\n        const ASK_SKILL_DIRECTORY_NAME = configAccessor.getValue(\"ask-skill-directory-name\", undefined, locale);\n\n        const OVERWRITE_WITH_SOURCE = configAccessor.getValue(\"update-string-with-source\", undefined, locale);\n\n        const snippets: any = param.snippets;\n\n        const s3ResourcesUri = `https://${S3_DOMAIN_NAME}/${S3_BUCKET_NAME}/${ASK_SKILL_DIRECTORY_NAME}/${locale}`;\n\n        this.voiceOverExtension = new ACEExtension.VoiceOverExtension(`${s3ResourcesUri}/vo/{{file_name}}`);\n        \n        let globalSceneExceptions: string[] = []; // list of scene names which should not have the global scene applied.\n\n        this.globalSceneExtension = new ACEExtension.GlobalDirectionsExtension(globalSceneExceptions);\n\n        // Can be passed in to use language strings from memory instead of loading from disk\n        let languageStrings: any = param.languageStrings || {};\n\n        if(!param.languageStrings) {\n            let languageStringPath = path.join(contentDir, \"..\", \"languageStrings.json\");\n            if (!fs.existsSync(languageStringPath)) {\n                languageStringPath = path.join(contentDir, \"..\", \"..\", \"languageStrings.json\");\n            }\n\n            if (fs.existsSync(languageStringPath)) {\n                try {\n                    languageStrings = require(languageStringPath);\n                } catch (err) {\n\n                }\n            }\n        }\n        \n        this.localizationExtension = new ACEExtension.LocalizationExtension(locale, languageStrings, OVERWRITE_WITH_SOURCE);\n\n        if(snippets) {\n            this.snippetExtension = new ACEExtension.SnippetExtension(snippets, s3ResourcesUri);\n        } else if (!fs.existsSync(SNIPPET_MAP_FILEPATH)) {\n            console.warn(`[WARN] Snippet config '${SNIPPET_MAP_FILEPATH}' cannot be found.`);\n        } else {\n            try {\n                let snippetMap: any = require(SNIPPET_MAP_FILEPATH);\n\n                this.snippetExtension = new ACEExtension.SnippetExtension(snippetMap, s3ResourcesUri);\n            } catch(err) {\n                console.warn(`[WARN] Badly formed JSON : Snippet config '${SNIPPET_MAP_FILEPATH}' could not be opened.`);\n            }\n        }\n    }\n\n    public getImportExtensions(): ACEExtensionType[] {\n        let importExtensions: ACEExtensionType[] = [\n            this.voiceOverExtension,\n            this.globalSceneExtension,\n            this.localizationExtension\n        ];\n\n        if (this.snippetExtension) {\n            importExtensions.push(this.snippetExtension)\n        }\n\n        return importExtensions;\n    }\n\n    public getDriverExtensions(): ACEExtensionType[] {\n        let driverExtensions: ACEExtensionType[] = [\n        ];\n\n        return driverExtensions;\n    }\n}"]}