"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const sfb_f_1 = require("@alexa-games/sfb-f");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class CoreExtensionLoader {
    constructor(locale = 'en-US', configAccessor, param = {}) {
        const contentDir = param.contentDir;
        const S3_DOMAIN_NAME = configAccessor.getValue("s3-domain-name", undefined, locale);
        const S3_BUCKET_NAME = configAccessor.getValue("s3-bucket-name", undefined, locale);
        const SNIPPET_MAP_FILEPATH = path.join(contentDir, configAccessor.getValue("snippet-map-filename", undefined, locale));
        const ASK_SKILL_DIRECTORY_NAME = configAccessor.getValue("ask-skill-directory-name", undefined, locale);
        const OVERWRITE_WITH_SOURCE = configAccessor.getValue("update-string-with-source", undefined, locale);
        const snippets = param.snippets;
        const s3ResourcesUri = `https://${S3_DOMAIN_NAME}/${S3_BUCKET_NAME}/${ASK_SKILL_DIRECTORY_NAME}/${locale}`;
        this.voiceOverExtension = new sfb_f_1.ACEExtension.VoiceOverExtension(`${s3ResourcesUri}/vo/{{file_name}}`);
        let globalSceneExceptions = [];
        this.globalSceneExtension = new sfb_f_1.ACEExtension.GlobalDirectionsExtension(globalSceneExceptions);
        let languageStrings = param.languageStrings || {};
        if (!param.languageStrings) {
            let languageStringPath = path.join(contentDir, "..", "languageStrings.json");
            if (!fs.existsSync(languageStringPath)) {
                languageStringPath = path.join(contentDir, "..", "..", "languageStrings.json");
            }
            if (fs.existsSync(languageStringPath)) {
                try {
                    languageStrings = require(languageStringPath);
                }
                catch (err) {
                }
            }
        }
        this.localizationExtension = new sfb_f_1.ACEExtension.LocalizationExtension(locale, languageStrings, OVERWRITE_WITH_SOURCE);
        if (snippets) {
            this.snippetExtension = new sfb_f_1.ACEExtension.SnippetExtension(snippets, s3ResourcesUri);
        }
        else if (!fs.existsSync(SNIPPET_MAP_FILEPATH)) {
            console.warn(`[WARN] Snippet config '${SNIPPET_MAP_FILEPATH}' cannot be found.`);
        }
        else {
            try {
                let snippetMap = require(SNIPPET_MAP_FILEPATH);
                this.snippetExtension = new sfb_f_1.ACEExtension.SnippetExtension(snippetMap, s3ResourcesUri);
            }
            catch (err) {
                console.warn(`[WARN] Badly formed JSON : Snippet config '${SNIPPET_MAP_FILEPATH}' could not be opened.`);
            }
        }
    }
    getImportExtensions() {
        let importExtensions = [
            this.voiceOverExtension,
            this.globalSceneExtension,
            this.localizationExtension
        ];
        if (this.snippetExtension) {
            importExtensions.push(this.snippetExtension);
        }
        return importExtensions;
    }
    getDriverExtensions() {
        let driverExtensions = [];
        return driverExtensions;
    }
}
exports.CoreExtensionLoader = CoreExtensionLoader;
//# sourceMappingURL=CoreExtensionLoader.js.map