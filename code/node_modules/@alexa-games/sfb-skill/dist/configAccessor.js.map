{"version":3,"file":"configAccessor.js","sourceRoot":"","sources":["../src/configAccessor.ts"],"names":[],"mappings":"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","sourcesContent":["declare var require: any\ndeclare var process: any\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nconst _ = require('lodash');\n\nexport class ConfigAccessor {\n\n    static defaultStage = \"dev\";\n    static defaultLocale = \"en-us\";\n\n    private resourcePath: string;\n\n    constructor(private abcConfig: any, resourcePath: string = \".\") {\n        this.resourcePath = path.resolve(resourcePath);\n    }\n\n    setValue(keyName : string, val: any, stage? : string, locale? : string) : void {\n\n        // Force stage and locate to lowercase\n        stage = (stage) ? stage.toLowerCase() : stage;\n        locale = (locale) ? locale.toLowerCase() : locale;\n\n        if(stage && locale) {\n            _.set(this.abcConfig, stage + \"-\" + locale + \".\" + keyName, val);\n            return;\n        } \n\n        if(stage) {\n            _.set(this.abcConfig, stage + \".\" + keyName, val);\n            return;\n        }\n\n        if(locale) {\n            _.set(this.abcConfig, locale + \".\" + keyName, val);\n            return;\n        }\n\n        _.set(this.abcConfig, \"default.\" + keyName, val);\n        return;\n    }\n\n    public get askSkillDirectoryName() {\n        return this.getValue(\"ask-skill-directory-name\");\n    }\n\n    public get validResourceFileExtensions(): string[] {\n        return this.getValue(\"valid-resource-file-extensions\") || [\"json\", \"csv\"];\n    }\n\n    public get publishLocales(): string[] {\n        return this.getValue(\"publish-locales\");\n    }\n\n    public getResourcePath(locale: string) {\n\n        // TODO: Cache this result?\n        const resourcesPathWithLocaleAndResources = path.resolve(this.resourcePath, locale, \"resources\");\n        if(fs.existsSync(resourcesPathWithLocaleAndResources)) {\n            return resourcesPathWithLocaleAndResources;\n        }\n\n        return path.resolve(this.resourcePath, locale);\n    }\n\n    getValue(keyName : string, stage? : string, locale? : string, skipLocaleMapping? : boolean, skillId? : string) : any {\n\n        // Force stage and locate to lowercase\n        stage = (stage) ? stage.toLowerCase() : stage;\n        locale = (locale) ? locale.toLowerCase() : locale;\n        \n        // If not specified, check for an environment variable and use it\n        if(!stage) {\n            stage = process.env.stage;\n            //console.log(\"Getting environment variable from: \" +  JSON.stringify(process.env) );\n        }\n\n        if(!locale) {\n            locale = process.env.locale;\n        }\n\n        // If still not specified, use a default value\n        if(!stage) {\n            stage = ConfigAccessor.defaultStage;\n        }\n\n        if(!locale) {\n            locale = ConfigAccessor.defaultLocale;\n        }\n\n        let mappedLocaleToUse = locale;\n        /*\n        // First map from given locale to mappedLocaleToUse\n        if(!skipLocaleMapping) {\n            // Need to make sure to set skipLocaleMapping to true to avoid a forever recursive loop\n            mappedLocaleToUse = ConfigHelper.getValue(\"localeToUse\", stage, locale, true);\n        }*/\n\n        let val : any = undefined;\n\n        // If skillId set, then try and lookup by it first\n        if(skillId) {\n            val = _.get(this.abcConfig, [skillId, keyName]);  // Don't use a string, because skill id includes dots, so instead use the lodash get array syntax\n            if(val) { return val; }                \n        }\n\n        // First lookup by stage and mappedLocaleToUse\n        val = _.get(this.abcConfig, stage + \"-\" + mappedLocaleToUse + \".\" + keyName);\n        if(val) { return val; }\n\n        // Then lookup by stage\n        val = _.get(this.abcConfig, stage + \".\" + keyName);\n        if(val) { return val; }\n\n        // Then lookup by mappedLocaleToUse\n        val = _.get(this.abcConfig, mappedLocaleToUse + \".\" + keyName);\n        if(val) { return val; }\n\n        // Then lookup by default\n        val = _.get(this.abcConfig, \"default.\" + keyName);\n        if(val) { return val; }\n        \n        return val;\n    }\n\n    public getRequestLocalizedValue(keyName : string, event : any) {\n        let locale = _.get(event, \"request.locale\");\n        let skillId = _.get(event, \"session.application.applicationId\");\n        //console.log(\"[DEBUG] ConfigHelper: getRequestLocalizedValue : Request locale=[ \" + locale + \"], SkillId=[\" + skillId + \"]\");\n\n        return this.getValue(keyName, undefined, locale, false, skillId);\n    }\n\n    public static loadConfigFile(configFile: string, storyPath?: string): Promise<ConfigAccessor> {\n        return new Promise((resolve, reject) => {\n            fs.readFile(configFile, 'utf8', function (err: any, data: string) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n    \n                resolve(new ConfigAccessor(JSON.parse(data), storyPath));\n            });\n        }); \n    }\n}\n"]}