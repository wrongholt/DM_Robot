import { StoryAccessor } from './../storyEntities/StoryAccessor';
import { PlayStage } from '../storyEntities/PlayStage';

import { ACEDriver } from '../driver';

import { SourceContentHelper } from '../importPlugins/sourceContentHelper';
import { StoryMetadataHelper } from '../importPlugins/storyMetadataHelper';
import { UserInputHelper } from '../importPlugins/userInputHelper';

/**
 * Implement ImporterExtension to modify the source content (string),
 * and/or modify the imported content (resulting StoryMetadata).
 */
export interface ImporterExtension {
    /**
     * Called before the import process begins.
     * Implement to modify the raw source content before importing.
     */
    extendSourceContent(sourceHelper: SourceContentHelper): Promise<void>;

    /**
     * Called right after the content has been imported as a StoryMetadata object.
     * Implement to process and modify the imported object.
     */
    extendImportedContent(metadataHelper: StoryMetadataHelper): Promise<void>;
}

/**
 * Parameter interface for DriverExtension
 */
export interface DriverExtensionParameter {
    storyState: {[key: string]: any}; // story variable name to variable value mapping. Story variables persisted per user.
    userInputHelper: UserInputHelper; // instance of a helper class to get / modify prased UserInput object.
    driver: ACEDriver; // instance of the driver, currently processing the story.
}

/**
 * Implement DriverExtension to modify the incoming UserInput or to add to the resulting output.
 */
export interface DriverExtension {
    /**
     * Called right before the driver processes the story.
     */
    pre(param: DriverExtensionParameter): Promise<void>;

    /**
     * Called right after the driver finished processing the story.
     */
    post(param: DriverExtensionParameter): Promise<void>;
}


/**
 * Parameter interface for InstructionExtension.
 */
export interface InstructionExtensionParameter {
    instructionName: string; // name of the custom instruction
    instructionParameters: {[key: string]: string} // parameters provided along with the custom instruction call
    storyState: {[key: string]: any}; // story variable name to variable value mapping. Story variables persisted per user.
    storyAccessor: StoryAccessor; // accessor for imported story metadata
    playStage: PlayStage; // Speech, reprompt, audio, and visual properties objects staged so far. Information here is used to respond with.
}

/**
 * Implement InstructionExtensinon to define the behavior of your custom instructions.
 * 
 * Story Driver checks for a public method of this instance matching the name of the custom instruction used in the story.
 * If such a method exists, the driver calls the method with an instance of InstructionExtensionParameter as an argument.
 * 
 * If multiple extensions have a support for a same custom instruction, all methods are executed in the order of extensions added.
 */
export interface InstructionExtension {
}

export function isInstructionExtension(extension: InstructionExtension | DriverExtension | ImporterExtension ): extension is InstructionExtension {
    return true; // Since "InstructionExtension" doesn't have required methods, any object is "technically" an InstructionExtension
}

export function isDriverExtension(extension: InstructionExtension | DriverExtension | ImporterExtension ): extension is DriverExtension {
    return (<DriverExtension>extension).pre !== undefined;
}

export function isImporterExtension(extension: InstructionExtension | DriverExtension | ImporterExtension): extension is ImporterExtension {
    return (<ImporterExtension>extension).extendImportedContent !== undefined;
}

export { GlobalDirectionsExtension } from './coreExtensions/GlobalDirectionsExtension';
export { LocalizationExtension } from './coreExtensions/LocalizationExtension';
export { SnippetExtension } from './coreExtensions/SnippetExtension';
export { VoiceOverExtension } from './coreExtensions/VoiceOverExtension';
