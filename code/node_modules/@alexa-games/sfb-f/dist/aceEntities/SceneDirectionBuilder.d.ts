import { SceneDirection, AudioBlendOption, VisualOptions } from './interfaces';
export declare class SceneDirectionBuilder {
    sceneDirections: SceneDirection[];
    private nestingStack;
    constructor();
    registerChoiceDirections(utterances: string[], directions: SceneDirection[], narration?: string, saveToHistory?: boolean): this;
    startChoice(utterances: string[], narration?: string, saveToHistory?: boolean): this;
    registerCondition(conditionString: string, directions: SceneDirection[]): this;
    startCondition(conditionString: string): this;
    goTo(targetSceneID: string, targetSceneProperty?: string): this;
    saveAndGoTo(targetSceneID: string, targetSceneProperty?: string): this;
    return(): this;
    pause(): this;
    restart(): this;
    repeat(): this;
    repeatReprompt(): this;
    goBack(backNumber: number): this;
    setReprompt(repromptSSML: string): this;
    setBackgroundMusic(audioURL: string, delayMs?: string, volume?: string, blendOption?: AudioBlendOption): void;
    setVisuals(visualOptions: VisualOptions): this;
    increaseVariable(variableName: string, increaseBy: string): this;
    multiplyVariable(variableName: string, multiplyBy: string): this;
    divideVariable(variableName: string, divideBy: string): this;
    reduceVariable(variableName: string, reduceBy: string): this;
    setVariable(variableName: string, value: string): this;
    setSlot(variableName: string, slotType: string): this;
    flag(variableName: string): this;
    unflag(variableName: string): this;
    clearVariable(variableName: string): this;
    setRecap(message: string): this;
    addToInventory(variableName: string, item: string): this;
    addItem(variableName: string, item: string, listSizeLimit?: number): this;
    removeItem(variableName: string, item: string): this;
    removeFirstItem(listName: string): this;
    removeLastItem(listName: string): this;
    rollDice(diceString: string): this;
    markEnding(): this;
    closeChoice(): this;
    closeCondition(): this;
    addSceneDirection(direction: SceneDirection): this;
    customDirection(customDirectionName: string, customParameters?: {
        [key: string]: string;
    }): this;
    getCurrentEpochTime(): this;
    setBookmark(bookmarkName: string, sceneName?: string): this;
    build(): SceneDirection[];
}
