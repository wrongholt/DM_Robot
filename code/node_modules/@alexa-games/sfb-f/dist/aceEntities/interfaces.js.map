{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../aceEntities/interfaces.ts"],"names":[],"mappings":";;AA4Fa,QAAA,gBAAgB,GAA8B;IACvD,cAAc,EAAE;QACZ,MAAM,EAAE,eAAe;KAC1B;IACD,YAAY,EAAE;QACV,MAAM,EAAE,aAAa;KACxB;CACJ,CAAA;AAED,IAAY,aAIX;AAJD,WAAY,aAAa;IACrB,uCAAqB,CAAA;IACrB,qCAAmB,CAAA;IACnB,qCAAmB,CAAA;AACvB,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB;AA8BD,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IACxB,iCAAa,CAAA;IACb,uCAAmB,CAAA;AACvB,CAAC,EAHW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAG3B;AAOD,IAAY,cAIX;AAJD,WAAY,cAAc;IACtB,iCAAe,CAAA;IACf,iCAAe,CAAA;IACf,+BAAa,CAAA;AACjB,CAAC,EAJW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAIzB;AAaD,IAAY,kBAsCX;AAtCD,WAAY,kBAAkB;IAC1B,6CAAuB,CAAA;IACvB,uCAAiB,CAAA;IACjB,6CAAuB,CAAA;IACvB,2CAAqB,CAAA;IACrB,uCAAiB,CAAA;IACjB,2CAAqB,CAAA;IACrB,uCAAiB,CAAA;IACjB,iCAAW,CAAA;IACX,mCAAa,CAAA;IACb,uCAAiB,CAAA;IACjB,qCAAe,CAAA;IACf,qCAAe,CAAA;IACf,wCAAkB,CAAA;IAClB,wDAAkC,CAAA;IAClC,2CAAqB,CAAA;IACrB,iDAA2B,CAAA;IAC3B,mDAA6B,CAAA;IAC7B,iDAA2B,CAAA;IAC3B,uDAAiC,CAAA;IACjC,uCAAiB,CAAA;IACjB,2CAAqB,CAAA;IACrB,2CAAqB,CAAA;IACrB,yCAAmB,CAAA;IACnB,mCAAa,CAAA;IACb,2CAAqB,CAAA;IAErB,qCAAe,CAAA;IACf,iDAA2B,CAAA;IAE3B,oCAAc,CAAA;IACd,yCAAmB,CAAA;IACnB,uCAAiB,CAAA;IACjB,uCAAiB,CAAA;IACjB,uCAAiB,CAAA;IACjB,mCAAa,CAAA;IACb,qCAAe,CAAA;IACf,yDAAmC,CAAA;AACvC,CAAC,EAtCW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAsC7B","sourcesContent":["import {ContentItem} from './../importer';\nimport {HandlerInput} from 'ask-sdk';\n\n// Interfaces for use by the rest of this module.\nexport interface ABCImportPlugin {\n    parameters: any;\n    \n    /**\n     * Unique name for the plug-in to identify the format/plug-in\n     */\n    readonly pluginName: string;\n    \n    /**\n     * This method is called by the importer to convert the source story into a list of Scene objects,\n     * which is used to build the imported ABCStoryMetadata\n     *\n     * @param inputData content of the source story.\n     * @return list of Scene objects, which will be used to build the resulting metadata.\n     */\n    importData(contents : ContentItem[], param?: {[key: string]: any}): Promise<ImportResult>;\n\n    /**\n     * Get language version that this import plugin is optimized for.\n     */\n    getVersion(): number;\n}\n\nexport interface ABCExporter {\n    exportData(jsonInputObj : {}, exportDataCallback : any) : void;\n}\n\nexport interface StoryMetadata {\n    pluginName: string;\n    storyTitle: string;\n    storyID: string;\n    scenes: Scene[];\n    alexaVoiceModel?: any;\n}\n\nexport interface Scene {\n    readonly id: string;\n    readonly contents: SceneVariation[];\n    readonly customProperties?: {[key:string]: any}\n}\n\nexport interface ImportResult {\n    importedScenes: Scene[],\n    errors?: ImportErrorLine[]\n}\n\nexport interface ImportError {\n    errorItems: ImportErrorLine[];\n    importedData: StoryMetadata;\n}\n\nexport interface ImportErrorLine {\n    lineNumber: number,\n    errorName: string,\n    errorMessage: string,\n    sourceID?: string\n}\n\nexport interface SceneVariation {\n    condition?: string;\n    narration?: string;\n    sceneDirections?: SceneDirection[];\n}\n\nexport interface SceneDirection {\n    readonly directionType: SceneDirectionType,\n    readonly parameters: {[key: string]: any;},\n    sourcePosition?: number,\n    sourceScene?: string\n}\n\nexport interface UserInput {\n    intent?: string,\n    slots?: Slot[],\n    value?: string,\n    handlerInput?: HandlerInput\n}\n\nexport interface ResultOption {\n    name: string,\n    value: any\n}\n\nexport interface Slot {\n    name: string,\n    value: string\n}\n\nexport const BuiltInUserInput: {[key:string]: UserInput} = {\n    \"Resume Story\": {\n        intent: \"LaunchRequest\",\n    },\n    \"Exit Story\": {\n        intent: \"ExitRequest\"\n    }\n}\n\nexport enum BuiltInScenes {\n    ResumeScene= \"Resume\",\n    PauseScene= \"Pause\",\n    StartScene= \"Start\"\n}\n\nexport interface Choice {\n    id: string,\n    utterances: string[],\n    narration?: string,\n    sceneDirections: SceneDirection[],\n    saveToHistory: boolean\n}\n\nexport interface ChoiceHistoryItem {\n    sourceSceneID: string,\n    choiceID: string,\n    stateDiff: StateDiffItem[]\n}\n\nexport interface StateDiffItem {\n    itemName: string,\n    beforeValue: any,\n    afterValue: any\n}\n\nexport interface AudioItem {\n    type: AlexaAudioType,\n    content: string,\n    volume: number,\n    delay: number,\n    options?: {[key: string]: string;}\n}\n\nexport enum AudioBlendOption {\n    TRIM = 'trim',\n    LONGEST = 'longest'\n}\n\nexport interface SceneAudioItem {\n    foreground: AudioItem[],\n    background: AudioItem[]\n}\n\nexport enum AlexaAudioType {\n    POLLY = \"polly\",\n    AUDIO = \"audio\",\n    TEXT = \"text\"\n}\n\nexport interface StorySlide {\n    prompt: string,\n    reprompt: string,\n    recap: string,\n    visual: VisualOptions\n}\n\nexport interface VisualOptions {\n    [key:string]: any; // Add index signature\n}\n\nexport enum SceneDirectionType {\n    CONDITION = \"condition\",\n    CHOICE = \"choice\",\n    BGM = \"backgroundmusic\",\n    INCREASE = \"increase\",\n    REDUCE = \"reduce\",\n    MULTIPLY = \"multiply\",\n    DIVIDE = \"divide\",\n    SET = \"set\",\n    FLAG = \"flag\",\n    UNFLAG = \"unflag\",\n    CLEAR = \"clear\",\n    RECAP = \"recap\",\n    ROLL = \"roll dice\",\n    ADD_TO_INVENTORY = \"add inventory\",\n    ADD_ITEM = \"add item\",\n    REMOVE_ITEM = \"remove item\",\n    REMOVE_FIRST = \"remove first\",\n    REMOVE_LAST = \"remove last\",\n    ADD_COLLECTION = \"add collection\",\n    CUSTOM = \"custom\",\n    REPROMPT = \"reprompt\",\n    GET_TIME = \"get time\",\n    VISUALS = \"visuals\",\n    SLOT = \"slot\",\n    BOOKMARK = \"bookmark\",\n\n    GO_TO = \"go to\",\n    SAVE_AND_GO = \"save and go\",\n\n    END = \"ending\",\n    RESTART = \"restart\",\n    RESUME = \"resume\",\n    RETURN = \"return\",\n    REPEAT = \"repeat\",\n    BACK = \"back\",\n    PAUSE = \"pause\",\n    REPEAT_REPROMPT = \"repeat reprompt\"\n}"]}