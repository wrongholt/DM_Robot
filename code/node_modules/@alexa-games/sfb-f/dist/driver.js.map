{"version":3,"file":"driver.js","sourceRoot":"","sources":["../driver.ts"],"names":[],"mappings":"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","sourcesContent":["declare var require: any\n\n// Are we running on windows or linux/mac?\n// Make this work on a mac and auto detect which platform I am on\ndeclare var process : {\n\tenv: {\n      platform: string,\n      ABC_DEBUG_PAD_SIZE: string\n\t},\n\tplatform: string\n}\n\nimport { BuiltInScenes, UserInput, StoryMetadata,\n    ABCImportPlugin, SceneDirection, SceneDirectionType,\n    Choice, Scene, AudioItem, SceneAudioItem, AlexaAudioType,\n    AudioBlendOption, ChoiceHistoryItem, StateDiffItem, VisualOptions,\n    ResultOption } from './aceEntities/interfaces';\n\nimport { StoryAccessor } from './storyEntities/StoryAccessor';\n\nimport { DefaultFormatImportPlugin } from './importPlugins/DefaultFormatImportPlugin';\n\nimport { isDriverExtension, isInstructionExtension,\n    InstructionExtension, ImporterExtension, DriverExtension } from './extensions/ACEExtension';\n\nimport { StoryStateHelper } from './StoryStateHelper';\n\nimport { createHash } from 'crypto';\nimport { PlayStage } from './storyEntities/PlayStage';\nimport { UserInputHelper } from './importPlugins/userInputHelper';\n\nconst TOTAL_SCENES_PROCESS_SAFEGUARD = 1000;\nconst isWin = (process.platform === \"win32\");\nconst AlexaPolly = require('@alexa-games/sfb-polly');\n\nlet POLLY_ENABLED = true;\nlet pollyConfig : any = undefined;\n\ntype ACEExtensionType = ImporterExtension | DriverExtension | InstructionExtension;\nexport class ACEDriver {\n    private static STORY_METADATA_CACHE: {[key: string]: {[key: string]: Scene}} = {};\n    public static debug: boolean = false;\n    public static testing: boolean = false;\n\n    /**\n     * flag this variable to alway run the average value for dice rolls.\n     */\n    public static probabilityOff: boolean = false;\n\n    private isPollyAsDefault: boolean = false;\n\n    private importHandlersByType : {[key: string] : ABCImportPlugin} = {};\n\n    private customExtensions: ACEExtensionType[] = [];\n\n    private resultOptions: ResultOption[] = [];\n\n    private storyState: {[key: string]: any};\n\n    private storyAccessor: StoryAccessor;\n    \n    private stage: PlayStage;\n\n    private playQueue: {\n        sceneID: string,\n        property: string\n    }[] = [];\n\n    private unhandledChoiceFlag = false;\n    private isPausing: boolean = false;\n    private isRepeating: boolean = false;\n    private locale: string;\n\n    voiceName: string = \"Brian\";\n    pitch: string = \"\";\n    rate: string = \"\";\n    volume: number = 1;\n    historySize: number = 10;\n\n    constructor(storyMetadata: StoryMetadata, customImportPlugins?: ABCImportPlugin[], extensions?: ACEExtensionType[], pollyConfiguration?: any, locale: string = 'en-US') {\n        this.locale = locale;\n        POLLY_ENABLED = pollyConfiguration ? pollyConfiguration.enabled : false; // Default to polly config off\n        pollyConfig = pollyConfiguration || {};\n\n        if (!ACEDriver.testing || pollyConfig.enabledInPreview) {\n            if (pollyConfiguration) {\n                AlexaPolly.configureOptions(pollyConfiguration);\n            } else {\n                if(isWin) {\n                    AlexaPolly.configureOptions({bucketName: \"cyoa-public\", combineAudioTags: true, dontUseCache: false, FFMPEGLocation: \"..\\\\ffmpeg.exe\", windowsOS: true, workingDir: \"c:\\\\Tmp\", ffmpegBinName: \"ffmpeg.exe\"});\n                } else {\n                    AlexaPolly.configureOptions({bucketName: \"cyoa-public\", combineAudioTags: true, dontUseCache: false});\n                }\n            }\n        }\n        \n        this.storyAccessor = new StoryAccessor(storyMetadata);\n        this.storyState = {};\n\n        this.stage = new PlayStage();\n        \n        let importPlugins: ABCImportPlugin[] = [\n\t\t\tnew DefaultFormatImportPlugin()            \n\t\t];\n\n\t\tif (customImportPlugins) {\n\t\t\timportPlugins = importPlugins.concat(customImportPlugins);\n        }\n\n\t\tfor (let importPlug of importPlugins) {\n\t\t\tthis.importHandlersByType[importPlug.pluginName] = importPlug;\n        }\n        \n        if (extensions) {\n            this.customExtensions = this.customExtensions.concat(extensions);\n        }\n    }\n\n    /**\n     * invoke before calling resumeStory if the story history and progress needs to be reset by running the start sequence.\n     * onStart implementation of all registered extensions are run.\n     * \n     * @param startingStoryState \n     */\n    public async resetStory(startingStoryState?: {[key: string]: any}) {\n        this.storyState = JSON.parse(JSON.stringify(startingStoryState || this.storyState));\n\n        StoryStateHelper.setCurrentSceneID(this.storyState, BuiltInScenes.StartScene);\n        StoryStateHelper.resetAvailableChoices(this.storyState);\n        StoryStateHelper.resetChoiceHistory(this.storyState);\n        \n        return;\n    }\n\n    /**\n     * Resume the story.\n     * If story has been paused, run the resume cycle by playing the 'Resume' scene first.\n     * Otherwise, Run normally from the bookmarked scene ID.\n     * \n     * @param userInput \n     * @param startingStoryState \n     */\n    public async resumeStory(_userInput: UserInput, startingStoryState?: {[key: string]: any}) {\n        try {\n            this.storyState = JSON.parse(JSON.stringify(startingStoryState || this.storyState));\n\n            // create instructions memory\n            if (!this.storyState.system_instruction_mem) {\n                this.storyState.system_instruction_mem = {};\n            }\n\n            if (StoryStateHelper.isEndingReached(this.storyState)) {\n                delete this.storyState.system_prevRecap;\n                delete this.storyState.system_prevSpeech;\n        \n                StoryStateHelper.setEndingReached(this.storyState, false);\n            }\n            \n            this.playQueue = [];\n            this.unhandledChoiceFlag = false; // Reset to false\n            this.isRepeating = false;\n\n            // apply user input extension by DriverExtensions\n            const inputHelper = new UserInputHelper(_userInput);\n            for (let extension of this.customExtensions) {\n                if (!isDriverExtension(extension)) {\n                    continue;\n                }\n\n                await extension.pre({\n                    driver: this,\n                    storyState: this.storyState,\n                    userInputHelper: inputHelper\n                });\n            }\n\n            const userInput = inputHelper.getUserInput();\n\n            if (!StoryStateHelper.isStoryPaused(this.storyState)) {\n                await this.processChoice.call(this, userInput);\n            }\n\n            if (!this.isRepeating) {\n                if(ACEDriver.debug) console.log(\"[DEBUG] Play queue length: \" + this.playQueue.length);\n                if (this.playQueue.length === 0) {\n                    let bookmarkedSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n                    if(ACEDriver.debug) console.log(\"[DEBUG] Current bookmark: \" + bookmarkedSceneID);\n        \n                    if (bookmarkedSceneID == null) {\n                        if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue start scene\");\n        \n                        this.playQueue.push({\n                            sceneID: BuiltInScenes.StartScene,\n                            property: \"narration\"\n                        });\n                    } else {\n                        let resumeExists: boolean = false;\n\n                        try {\n                            let scene: Scene = await this.getSceneByID(BuiltInScenes.ResumeScene);\n\n                            if (scene) {\n                                resumeExists = true;\n                            }                        \n                        } catch(err) {\n                            resumeExists = false;   \n                        }\n\n                        if (StoryStateHelper.isStoryPaused(this.storyState) && resumeExists) {\n                            if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue resume scene, and clear choices.\");\n                            StoryStateHelper.resetAvailableChoices(this.storyState);\n                            if (StoryStateHelper.getCurrentSceneID(this.storyState) !== BuiltInScenes.PauseScene) {\n                                this.storyState.resume = StoryStateHelper.getCurrentSceneID(this.storyState);\n                            }\n                            this.playQueue.push({\n                                sceneID: BuiltInScenes.ResumeScene,\n                                property: \"narration\"\n                            });\n                        } else {\n                            if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue saved scene: \" + bookmarkedSceneID);\n        \n                            this.playQueue.push({\n                                sceneID: bookmarkedSceneID,\n                                property: \"narration\"\n                            });    \n                        }\n\n                        // Also set a flag to indicate that we hit an unhandled choice so the caller can do something different if they want to\n                        this.unhandledChoiceFlag = true;\n                    }\n                }\n        \n                StoryStateHelper.setStoryPaused(this.storyState, false);\n                \n                if (!this.storyState.system_originStack) {\n                    this.storyState.system_originStack = [];\n                }\n\n                this.storyState.system_originStack.push(this.playQueue[0]);\n\n                if (this.storyState.system_originStack.length > this.historySize) {\n                    // too large, remove first item\n                    this.storyState.system_originStack.splice(0, 1);\n                }\n\n                let totalScenesProcessedCount = 0;\n\n                while (this.playQueue.length > 0 && !this.isPausing) {\n\n                    let dequeuedSceneID: {\n                        sceneID: string,\n                        property: string\n                    } = this.playQueue.splice(0, 1)[0];\n\n                    if(ACEDriver.debug) console.log(\"[DEBUG] Setting the current scene to: \" + dequeuedSceneID);\n                    this.stage.logVisitedScene(dequeuedSceneID.sceneID);\n        \n                    StoryStateHelper.setCurrentSceneID(this.storyState, dequeuedSceneID.sceneID);\n                    \n                    let preProcessState: string = JSON.stringify(this.storyState);            \n        \n                    await this.processScene.call(this, undefined, dequeuedSceneID.property);\n\n                    if (ACEDriver.testing) {\n                        let beforeStructure: any = JSON.parse(preProcessState);\n                        console.log(\"\\n\");\n                        check(\"\", beforeStructure, this.storyState);\n                    }\n\n                    totalScenesProcessedCount++;\n                    if(totalScenesProcessedCount >= TOTAL_SCENES_PROCESS_SAFEGUARD) {\n                        throw \"[ACE Driver - Infinite Loop] Looped \" + TOTAL_SCENES_PROCESS_SAFEGUARD + \" times, last scene ID was: \" + dequeuedSceneID.sceneID + \". Please fix your inifite loop.\";\n                    }\n                }\n\n                if (this.isPausing) {\n                    this.isPausing = false;\n                    await this.pauseStory(_userInput);\n                }\n            }\n\n            this.storyState.system_prevSpeech = this.stage.getStageSpeechAudioSequence();\n            this.storyState.system_prevReprompt = this.stage.getStageRepromptAudioSequence();\n            this.storyState.system_prevRecap = this.stage.getStageRecapAudioSequence();\n\n            // apply user input extension by DriverExtensions\n            for (let extension of this.customExtensions) {\n                if (!isDriverExtension(extension)) {\n                    continue;\n                }\n\n                await extension.post({\n                    driver: this,\n                    storyState: this.storyState,\n                    userInputHelper: inputHelper                    \n                });\n            }\n\n            return;\n        } catch(err) {\n            throw err;\n        }\n        \n    }\n\n    /**\n     * Run the pause sequence by playing the 'Pause' scene.\n     * \n     * @param startingStoryState \n     */\n    public async pauseStory(_userInput: UserInput, startingStoryState?: {[key: string]: any}) {\n        this.storyState = Object.assign({}, startingStoryState || this.storyState);\n\n        // create instructions memory\n        if (!this.storyState.system_instruction_mem) {\n            this.storyState.system_instruction_mem = {};\n        }\n\n        let savingSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n\n        if (savingSceneID == BuiltInScenes.ResumeScene) {\n            savingSceneID = this.storyState.resume\n        }\n\n        StoryStateHelper.setCurrentSceneID(this.storyState, BuiltInScenes.PauseScene);\n            \n        let preProcessState: string = JSON.stringify(this.storyState);            \n\n        await this.processScene.call(this);\n\n        if (ACEDriver.testing) {\n            let beforeStructure: any = JSON.parse(preProcessState);\n            console.log(\"\\n\");\n            check(\"\", beforeStructure, this.storyState);\n        }\n\n        // saving the previous scene for next resume.\n        StoryStateHelper.setCurrentSceneID(this.storyState, savingSceneID === null ? BuiltInScenes.StartScene: savingSceneID);\n\n        StoryStateHelper.setStoryPaused(this.storyState, true);\n\n        // apply user input extension by DriverExtensions\n        const inputHelper = new UserInputHelper(_userInput);\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.post({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper                    \n            });\n        }\n\n        return;\n    }\n\n    /**\n     * Undo a choice.\n     */\n    public async undoLastChoice(storyState: {[key: string]: any}) {\n        let choiceHistory: ChoiceHistoryItem[] = StoryStateHelper.getChoiceHistory(storyState);\n\n        if (choiceHistory && choiceHistory.length > 0){ \n            let lastChoice: ChoiceHistoryItem = choiceHistory[choiceHistory.length - 1];\n\n            for (let stateDiff of lastChoice.stateDiff) {\n                if (stateDiff.beforeValue === undefined) {\n                    delete storyState[stateDiff.itemName];\n                } else {\n                    storyState[stateDiff.itemName] = stateDiff.beforeValue;\n                }\n            }            \n\n            choiceHistory.splice(-1, 1);// pop \n        }\n        \n        StoryStateHelper.setChoiceHistory(storyState, choiceHistory);\n        return;\n    }\n\n    public async enqueueNextSceneID(nextSceneID: string) {\n        this.playQueue.push({\n            sceneID: nextSceneID,\n            property: \"narration\"\n        });\n    }\n\n    /**\n     * Configure the default polly narrator settings.\n     * @param voiceName \n     * @param pitch \n     * @param rate \n     * @param volume \n     */\n    public configureDefaultPollyNarrator(voiceName: string, pitch: string, rate: string, volume: number) {\n        this.voiceName = voiceName;\n        this.pitch = pitch;\n        this.rate = rate;\n        this.volume = volume;\n        AlexaPolly.registerVoiceName(voiceName, {name: voiceName, rate: rate, pitch: pitch});\n    }    \n\n    /**\n     * Turning on the 'default polly' causes all narration texts (including the ones not surrounded by the 'voice' tag) to be read in polly voice.\n     * The polly voice setting for this can be configured by calling configureDefaultPollyNarrator().\n     */\n    public turnOnDefaultPolly() {\n        this.isPollyAsDefault = true;\n    }\n\n    /**\n     * Turning off the 'default polly' causes all narration texts (texts NOT surrounded by the 'voice' tag) to be processed as non-polly voice.\n     */\n    public turnOffDefaultPolly() {\n        this.isPollyAsDefault = false;\n    }\n\n    public buildAudioBuilder(audioBuilder : any) {\n        return new Promise<string> (async (resolve, reject) => {\n                audioBuilder.buildAudioFile(function(outputUrl : string, err : any) {\n\n                    if(err) {\n                        reject(err);\n                        return;\n                    }\n\n                    resolve(outputUrl);\n                }, this);    \n        });\n    }\n\n    public combineSSMLAudioTags(ssmlIn : string) {\n        return new Promise<string> (async (resolve, reject) => {\n            console.log(\"combining: \" + ssmlIn);\n            AlexaPolly.combineAudioTags(ssmlIn, function(ssmlOut : string) {\n                console.log(\"combined to : \" + ssmlOut);\n                resolve(ssmlOut);\n            });\n        });\n    }\n\n    public async getSpeechSSMLText() {\n        try {\n            let {ssml} = await this.buildAudioScenes(this.stage.getStageSpeechAudioSequence());\n\n            return ssml;\n        } catch (err) {\n            throw err;\n        }\n    }  \n\n    public async getSpeechSSMLAndPrettyText() {\n        try {\n            let {ssml, pretty} = await this.buildAudioScenes(this.stage.getStageSpeechAudioSequence());\n\n            return {ssml, pretty};\n        } catch (err) {\n            throw err;\n        }\n    }  \n\n    public async getRepromptSSMLText() {\n        try {\n            let {ssml} = await this.buildAudioScenes(this.stage.getStageRepromptAudioSequence());\n\n            return ssml;\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    public async getRepromptSSMLAndPrettyText() {\n        try {\n            let {ssml, pretty} = await this.buildAudioScenes(this.stage.getStageRepromptAudioSequence());\n\n            return {ssml, pretty};\n        } catch (err) {\n            throw err;\n        }\n    }  \n\n    public async getVisuals() : Promise<VisualOptions[] | undefined> {\n        return this.stage.getStageVisualOptions();\n    }\n\n    public async buildAudioScenes(sceneAudioItemList: SceneAudioItem[]) {\n        try {\n            let overallSSML : string = \"\";\n            let prettySSML : string = \"\";\n\n            for (let audioItem of sceneAudioItemList) {\n                let foregroundSSML: string = \"\";\n        \n                for (let foregroundAudio of audioItem.foreground) {\n                    // Build the foreground audio up into a single ssml tag\n                    if (!ACEDriver.testing || pollyConfig.enabledInPreview) {\n                        if (foregroundAudio.type === AlexaAudioType.AUDIO) {\n                            // If values are defaults, then don't change the audio file at all and keep it at it's original quality\n                            if(!POLLY_ENABLED || (foregroundAudio.delay == 0 && foregroundAudio.volume == 1.0) ) {\n                                foregroundSSML += `<audio src='${foregroundAudio.content}' />`;    \n                                prettySSML += `<audio src='${foregroundAudio.content}' />`;\n                            } else {\n                                let audioBuilder = new AlexaPolly.AlexaAudioBuilder();\n                                audioBuilder.addSFXSequence({url: foregroundAudio.content, delayMs: foregroundAudio.delay, volume: foregroundAudio.volume});\n                                let audioUrl = await this.buildAudioBuilder(audioBuilder);\n        \n                                foregroundSSML += `<audio src='${audioUrl}' />`;    \n                                prettySSML += `<audio src='${audioUrl}' />`;\n                            }\n                        } else if (foregroundAudio.type === AlexaAudioType.POLLY) {\n                            if(foregroundAudio.options) {\n                                if(!POLLY_ENABLED) {\n                                    const hasProsodyMod = !!((foregroundAudio.options.pitch && foregroundAudio.options.pitch.length > 0)  || (foregroundAudio.options.rate && foregroundAudio.options.rate.length > 0) || (foregroundAudio.options.volume && foregroundAudio.options.volume.length > 0));\n                                    let voiceOpenTag: string = `<voice name='${foregroundAudio.options.voice}'>`;\n                                    let voiceCloseTag: string = \"</voice>\";\n                                    if (hasProsodyMod) {\n                                        let prosodyOptions = \"\";\n                                        if (foregroundAudio.options.pitch && foregroundAudio.options.pitch.length > 0) {\n                                            prosodyOptions += `pitch='${foregroundAudio.options.pitch}'`;\n                                        }\n\n                                        if (foregroundAudio.options.rate && foregroundAudio.options.rate.length > 0) {\n                                            prosodyOptions += ` rate='${foregroundAudio.options.rate}'`;\n                                        }\n\n                                        if (foregroundAudio.options.volume && foregroundAudio.options.volume.length > 0) {\n                                            prosodyOptions += ` volume='${foregroundAudio.options.volume}'`;\n                                        }\n                                        \n                                        voiceOpenTag += `<prosody ${prosodyOptions}>`;\n                                        voiceCloseTag = `</prosody>${voiceCloseTag}`\n                                    }\n                                    \n                                    foregroundSSML += `${voiceOpenTag}${foregroundAudio.content}${voiceCloseTag}`;\n                                    prettySSML += `${voiceOpenTag}${foregroundAudio.content}${voiceCloseTag}`;\n                                } else {\n                                    let audioBuilder = new AlexaPolly.AlexaAudioBuilder();\n\n                                    audioBuilder.addPollySequence({name: foregroundAudio.options.voice, text: foregroundAudio.content, delayMs: foregroundAudio.delay, volume: foregroundAudio.volume, rate: foregroundAudio.options.rate, pitch: foregroundAudio.options.pitch});\n                                    let audioUrl = await this.buildAudioBuilder(audioBuilder);\n\n                                    foregroundSSML += `<audio src='${audioUrl}' />`;\n                                    prettySSML += `<voice name='${foregroundAudio.options.voice}'>${foregroundAudio.content}</voice>`;\n                                }\n                            }\n                        } else {\n                            if(ACEDriver.testing && pollyConfig.enabledInPreview) {\n                                let audioBuilder = new AlexaPolly.AlexaAudioBuilder();\n                                audioBuilder.addPollySequence({ name: 'Amy', text: foregroundAudio.content, volume: foregroundAudio.volume});\n                                let audioUrl = await this.buildAudioBuilder(audioBuilder);\n                                foregroundSSML += `<audio src='${audioUrl}' />`;\n                                prettySSML += ` ${foregroundAudio.content}`;\n                            } else {\n                                foregroundSSML += ` ${foregroundAudio.content}`;\n                                prettySSML += ` ${foregroundAudio.content}`;\n                            }\n                        }\n\n                    } else {\n                        // We are testing, so just return something that will not be valid ssml\n                        if (foregroundAudio.type === AlexaAudioType.AUDIO) {\n                            foregroundSSML += `<audio src='${foregroundAudio.content}'/>`;\n                            prettySSML += `<audio src='${foregroundAudio.content}'/>`;\n                        } else if (foregroundAudio.type === AlexaAudioType.POLLY) {\n                            if(foregroundAudio.options) {\n                                foregroundSSML += `<voice name='${foregroundAudio.options.voice}'>${foregroundAudio.content}</voice>`;\n                                prettySSML += `<voice name='${foregroundAudio.options.voice}'>${foregroundAudio.content}</voice>`;\n                                //                            foregroundSSML += `(POLLY:name=${foregroundAudio.options.voice} text=${foregroundAudio.content} delayMs=${foregroundAudio.delay} volume=${foregroundAudio.volume} rate=${foregroundAudio.options.rate} pitch=${foregroundAudio.options.pitch})`;\n                            } else {\n                                foregroundSSML += `(POLLY:name=ERROR_NO_POLLY_NAME_SET text=${foregroundAudio.content} delayMs=${foregroundAudio.delay} volume=${foregroundAudio.volume})`;\n                                prettySSML += `(POLLY:name=ERROR_NO_POLLY_NAME_SET text=${foregroundAudio.content} delayMs=${foregroundAudio.delay} volume=${foregroundAudio.volume})`;\n                            }\n                        } else {\n                            foregroundSSML += ` ${foregroundAudio.content}`;\n                            prettySSML += ` ${foregroundAudio.content}`;\n                        }\n                    }\n                }\n\n                let primaryBackgroundAudioItem : AudioItem | undefined = undefined;\n                for (let backgroundAudio of audioItem.background) {\n\n                    if (backgroundAudio.type === AlexaAudioType.AUDIO) {\n                        // TODO: Loop through and make a whole audio builder out of all the background items\n                        // TODO: Right now it only supports one background audio item\n                        primaryBackgroundAudioItem = backgroundAudio;\n                    }\n                }\n\n                // Now combine all of the audio tags if there is background music, otherwise leave them alone. Only works if polly is enabled.\n                if(!POLLY_ENABLED || !primaryBackgroundAudioItem) {\n                    overallSSML += foregroundSSML;\n                } else if(primaryBackgroundAudioItem) {                \n                    if (!ACEDriver.testing || pollyConfig.enabledInPreview) {\n                        let foregroundCombinedSSML = await this.combineSSMLAudioTags(foregroundSSML);\n                \n                        // Now grab and replace the first URL found in the above and mix it with the background music\n                        let srcUrlRegex = /<audio src='([^']*?)'/g;\t\t\t\t\t\n                        let srcUrlMatch = srcUrlRegex.exec(foregroundCombinedSSML);\n                    \n                        if(srcUrlMatch && srcUrlMatch[1]) {\n                            let foregroundAudioUrl = srcUrlMatch[1];\n\n                            let foregroundDelay = 0;\n                            let backgroundDelay = primaryBackgroundAudioItem.delay;\n\n                            if(backgroundDelay < 0) {\n                                foregroundDelay += Math.abs(backgroundDelay);\n                                backgroundDelay = 0;\n                            }\n\n                            let audioBuilder = new AlexaPolly.AlexaAudioBuilder();\n\n                            if (primaryBackgroundAudioItem.options && primaryBackgroundAudioItem.options.blend === AudioBlendOption.LONGEST) {\n                                audioBuilder.trimSetting = \"longest\";\n                            } else {\n                                audioBuilder.trimSetting = \"first\";\n                            }\n\n                            audioBuilder.addSFXSequence({url: foregroundAudioUrl, delayMs: foregroundDelay, volume: 1.0});\n                            audioBuilder.addSFXSequence({url: primaryBackgroundAudioItem.content, delayMs: backgroundDelay, volume: primaryBackgroundAudioItem.volume});\n                            \n                            let combinedForegroundBackgroundUrl = await this.buildAudioBuilder(audioBuilder);\n\n                            foregroundCombinedSSML = foregroundCombinedSSML.replace(foregroundAudioUrl, combinedForegroundBackgroundUrl);\n                        }\n\n                        overallSSML += foregroundCombinedSSML;\n                    } else {\n                        overallSSML += foregroundSSML + `(BGM:<audio src='${primaryBackgroundAudioItem.content}' delay='${primaryBackgroundAudioItem.delay}' volume='${primaryBackgroundAudioItem.volume}'/>)`;\n                    } \n                }\n            }\n\n            // Now, run combine audio tags again on the whole entire thing in case there are still more than 5 audio tags across all scenes.\n            let overallCombinedSSML : string;\n            \n            if ((!ACEDriver.testing && (AlexaPolly.hasMoreThanFiveAudioTags(overallSSML) || pollyConfig.combineToSingleAudioFile) ) \n                || (ACEDriver.testing && pollyConfig.enabledInPreview)) {\n                overallCombinedSSML = await this.combineSSMLAudioTags(overallSSML);\n            } else {\n                overallCombinedSSML = overallSSML;\n            }\n\n            return {ssml: overallCombinedSSML, pretty: prettySSML};\n        } catch(err) {\n            throw err; \n        }\n    }\n\n    /**\n     * Get the current story state.\n     */\n    public getCurrentStoryState(): {[key: string]: any} {\n        return JSON.parse(JSON.stringify(this.storyState)); //deep copy\n    }\n\n    public getResultOptions(): ResultOption[] {\n        return this.resultOptions;\n    }\n\n    /**\n     * See if the scene marked as ending, or scene leading to no new choice has been reached as a result of the current resume/run.\n     */\n    public isEndingReached(): boolean {\n        return StoryStateHelper.isEndingReached(this.storyState);\n    }\n\n    /**\n     * See if a choice was unhandled and allow the caller to do something else if they need to.\n     */\n    public isUnhandledChoice(): boolean {\n        return this.unhandledChoiceFlag;        \n    }\n\n    /**\n     * Execute the selected choice indicated by the user input.  \n     */\n    public async processChoice(userInput: UserInput): Promise<any> {\n        return new Promise<any> (async (resolve, reject) => {\n            if (ACEDriver.debug) console.log(\"[DEBUG] Calling processChoice\");\n\n            let availableChoices: Choice[] = StoryStateHelper.getAvailableChoices(this.storyState)\n\n            if (ACEDriver.debug) console.log(\"[DEBUG] Loading Available Choices: \" + JSON.stringify(availableChoices, null, 4));\n\n            let selectedChoice: Choice | null = StoryStateHelper.getChoiceByUserInput(this.storyState, userInput, this.locale);\n\n            if (ACEDriver.debug) console.log(`[DEBUG] With UserInput=${JSON.stringify(userInput)}, Selected Choice=${JSON.stringify(selectedChoice, null, 4)}`);\n\n            if (selectedChoice == null) {\n                if ((!this.storyState.system_prevRecap || this.storyState.system_prevRecap.length == 0)\n                    && (!this.storyState.system_prevSpeech || this.storyState.system_prevSpeech.length == 0)) {\n                    this.isRepeating = false;\n                } else {\n                    if (this.storyState.system_prevRecap && this.storyState.system_prevRecap.length > 0) {\n                        this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevRecap);\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevRecap);\n                    } else if (this.storyState.system_prevSpeech && this.storyState.system_prevSpeech.length > 0) {\n                        this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevSpeech);\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevSpeech);\n                    }\n    \n                    if (this.storyState.system_prevReprompt && this.storyState.system_prevReprompt.length > 0) {\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevRecap);\n                    }                \n    \n                    this.isRepeating = true;\n                }\n            } else {\n                StoryStateHelper.setSelectedChoiceID(this.storyState, selectedChoice.id);\n\n                let beforeState: any = JSON.parse(JSON.stringify(this.storyState));\n                try {\n                    let tempChoiceInstructionAddress: string = StoryStateHelper.getCurrentSceneID(this.storyState) + \":\" + selectedChoice.id + \":\" + -1;\n\n                    this.storyState.system_instruction_mem[tempChoiceInstructionAddress] = selectedChoice.sceneDirections;\n\n                    await this.performInstructions.call(this, tempChoiceInstructionAddress);\n                } catch (err) {\n                    reject(err);\n                }\n                \n                if (!this.isRepeating) {\n                    StoryStateHelper.resetAvailableChoices(this.storyState);\n\n                    if (selectedChoice.saveToHistory) {\n                        StoryStateHelper.addChoiceHistory(this.storyState, selectedChoice, getStateDiffs(beforeState, this.storyState), this.historySize);\n                    }\n                }                \n            }\n\n            StoryStateHelper.clearSelectedChoiceID(this.storyState);\n\n            resolve();\n        });\n    }\n\n    /**\n     * Process the current scene. Updating speech, reprompt, variables as indicated by the scene.\n     */\n    private async processScene(sceneID?: string, sceneProperty?: string): Promise<any> {\n        return new Promise<any> (async (resolve, reject) => {\n            if (ACEDriver.debug) console.log(\"[INFO] Calling processScene.\");\n\n            let currentSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n\n            if (sceneID) {\n                currentSceneID = sceneID;\n            }\n\n            if (ACEDriver.testing) {\n                console.log(\"\\n\\nSCENE '\" + currentSceneID + \"'\");\n                console.log(\"........................\");\n            }\n            \n            let currentScene: Scene | undefined = undefined;\n            if (currentSceneID != null) {\n                try {\n                    currentScene = await this.getSceneByID(currentSceneID || \"\");  \n                } catch(err) {\n                    reject(err);\n                }\n            } \n\n            if (!currentScene) {\n                if (ACEDriver.debug) reject(`[WARN] Cannot find the Scene=[${currentSceneID}]`);\n                else resolve();\n                return;\n            }\n            \n            this.stage.startNewScene();\n\n            StoryStateHelper.clearRecap(this.storyState);\n\n            for (let variation of currentScene.contents) {\n                // evaluate body's conditional\n                let conditionPassed: boolean = true;\n\n                if (variation.condition && !variation.condition.startsWith(\"otherwise\")) {\n                    if (ACEDriver.debug) console.log(\"[DEBUG] pre-substitution condition= \" + JSON.stringify(variation.condition, null, 4));\n                    \n                    let substitution: any  = substituteSlotValues(variation.condition, this.storyState);\n                    \n                    if (ACEDriver.debug) console.log(\"[DEBUG] post-substitution condition= \" + JSON.stringify(substitution, null, 4));\n                    try {\n                        if(!evalInContext(substitution.value, this)) {\n                            conditionPassed = false;\n                        }\n                    } catch(err){ \n                        reject(err);\n                        return;\n                    }\n                }\n\n                if (!conditionPassed) {\n                    if (ACEDriver.testing && variation.condition) console.log(`${padString(\"FAILED\",8)}\\t>${variation.condition}`);\n                    continue;\n                }\n\n                if (ACEDriver.testing && variation.condition) console.log(`${padString(\"PASSED\",8)}\\t>${variation.condition}`);\n\n                /*\n                 * Narration\n                 */\n                let sceneNarration: AudioItem[] = [];\n\n                if (variation.narration) {\n                    let narrationText: string = substituteSlotValues(variation.narration, this.storyState, false).value\n                        .replace(/\\n/g, \" \")\n                        .replace(/[\\s]+/g, \" \");\n\n                    let narrationVariations: string[] = narrationText.split(\"||\");\n\n                    let selectedNarration: string = narrationVariations[Math.floor(Math.random() * narrationVariations.length)];\n                    sceneNarration = this.buildAudioItemsFromSSML(selectedNarration);     \n                } \n\n                /*\n                 * Scene Directions\n                 */\n                try {\n                    if (variation.sceneDirections && variation.sceneDirections.length > 0) {\n                        let instructionSetAddress: string = currentSceneID + \":\" + -1;\n\n                        this.storyState.system_instruction_mem[instructionSetAddress] = (JSON.parse(JSON.stringify(variation.sceneDirections)));\n                        \n                        await this.performInstructions(instructionSetAddress);\n                    }\n                } catch(err) {\n                    throw err;\n                }\n\n                if (sceneProperty && sceneProperty.trim().toLowerCase() == \"reprompt\" && this.stage.getRepromptSceneAudio().foreground.length > 0) {\n                    sceneNarration = this.stage.getRepromptSceneAudio().foreground;\n                }\n\n                if (sceneProperty && sceneProperty.trim().toLowerCase() == \"recap\" && this.stage.getRecapSceneAudio().foreground.length > 0) {\n                    sceneNarration = this.stage.getRecapSceneAudio().foreground;\n                }\n\n                this.stage.appendSceneSpeechForeground(sceneNarration);\n\n                break; // Only one of the scene variations are played.\n            }\n            \n            this.stage.closeScene();\n\n            resolve();\n        });\n    }\n\n    /**\n     * Peform given list of scene directions in order.\n     * \n     * @param directions Scene Directions to peform.\n     * @return returns the resulting scene direction where all the variables are replaced by the actual values.\n     */\n    public async performInstructions(instructionAddress: string): Promise<boolean> {\n        if (ACEDriver.debug) console.log(`[DEBUG] Calling performSceneDirections...`);\n\n        let isTerminatingDirection: boolean = false;\n        \n        let visualAlreadyDefined: boolean = false;\n\n        let directions: SceneDirection[] = this.storyState.system_instruction_mem[instructionAddress];\n\n        for (let lineNumber = 0 ; lineNumber < directions.length; lineNumber++) {\n            let parameters: {[key: string]: any;} = JSON.parse(JSON.stringify(directions[lineNumber].parameters));\n            let type: SceneDirectionType = directions[lineNumber].directionType;\n\n            for (let paramName of Object.keys(parameters)) {\n                if (typeof(parameters[paramName]) == 'string') {\n\n                    if(type !== SceneDirectionType.REPROMPT && paramName != \"condition\") {\n                        parameters[paramName] = substituteSlotValues(parameters[paramName], this.storyState, false).value;\n                    } else {\n                        parameters[paramName] = substituteSlotValues(parameters[paramName], this.storyState).value;\n                    }\n                }\n            }\n\n            switch(type) {\n            case SceneDirectionType.CUSTOM: {\n                \n                if (ACEDriver.testing) console.log(`${padString(\"CUSTOM\",8)}\\t> calling custom instruction with:\\n${JSON.stringify(parameters, null, 4)}`);\n\n                for (let extension of this.customExtensions) {\n                    if (isInstructionExtension(extension)) {\n                        const customInstructionName: string = parameters.customName;\n\n                        if ((extension as any)[customInstructionName]) {\n                            await (extension as any)[customInstructionName]({\n                                    instructionName:parameters.customName,\n                                    instructionParameters: parameters,\n                                    playStage: this.stage,\n                                    storyAccessor: this.storyAccessor,\n                                    storyState: this.storyState\n                                });\n                        }\n                    } else {\n                        continue;\n                    }\n                }\n\n                break;\n            }\n            case SceneDirectionType.SLOT: {\n                let variableName: string = parameters.variableName;\n                let slotType: string = parameters.variableType;\n\n                if (!this.storyState[variableName] || typeof this.storyState[variableName] != 'object') {\n                    this.storyState[variableName] = {};\n                }\n\n                this.storyState[variableName].type = slotType;\n\n                if (ACEDriver.testing) console.log(`${padString(\"SLOT\",8)}\\t>'${variableName}' as ${slotType}`);\n                break;\n            }\n            case SceneDirectionType.BOOKMARK: {\n                let bookmarkName: string = parameters.variableName;\n                let targetName: string | null = parameters.variableValue;\n\n                if (!targetName) {\n                    targetName = StoryStateHelper.getCurrentSceneID(this.storyState);\n                }\n \n                if (targetName == null) {\n                    throw \"[ACEDriver Error] target is not defined for the bookmark command.\";\n                }\n\n                this.storyState[bookmarkName] = {\n                    type: 'sceneID',\n                    value: targetName\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"BOOKMARK\",8)}\\t>'${bookmarkName}' as ${targetName}`);\n                break;\n\n            }\n            case SceneDirectionType.CHOICE: {\n                let choiceID: string = createHash('md5').update(JSON.stringify(parameters.utterances).trim().toLowerCase()).digest('hex');\n                \n                let choiceInstructions: SceneDirection[] = parameters.directions ? (JSON.parse(JSON.stringify(parameters.directions))) : [];\n\n                let choice: Choice = {\n                    id: choiceID,\n                    sceneDirections: choiceInstructions,\n                    utterances: parameters.utterances,\n                    saveToHistory: false//parameters.saveToHistory && parameters.saveToHistory.trim().toLowerCase() == 'true'? true: false\n                }\n\n                if (parameters.narration) {\n                    choice.narration = parameters.narration;\n                }\n\n                StoryStateHelper.enqueueAvailableChoice(this.storyState, choice);\n\n                if (ACEDriver.testing) console.log(`${padString(\"CHOICE\",8)}\\t> Register ChoiceID=[${choiceID}] for expected input '${parameters.utterances}' for instructions ${JSON.stringify(choiceInstructions, null, 4)}`);\n\n                break;\n            }\n            case SceneDirectionType.CONDITION: {\n                let conditionPassed: boolean = true;\n                \n                let conditionString: string = parameters.condition;\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] pre-substitution condition= \" + JSON.stringify(conditionString, null, 4));\n                    \n                let substitution: any  = substituteSlotValues(conditionString, this.storyState);\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] post-substitution condition= \" + JSON.stringify(substitution, null, 4));\n\n                try {\n                    if(!evalInContext(substitution.value, this)) {\n                        conditionPassed = false;\n                    }\n                } catch(err){ \n                    throw err;\n                }\n\n                if (!conditionPassed) {\n                    if (ACEDriver.testing && conditionString) console.log(`${padString(\"FAILED\",8)}\\t>'${directions[lineNumber].parameters.condition}' evaluated as [${conditionString}]`);\n                } else {\n                    if (ACEDriver.testing && conditionString) console.log(`${padString(\"PASSED\",8)}\\t>'${directions[lineNumber].parameters.condition}' evaluated as [${conditionString}]`);\n                    let conditionInstructionAddress: string = instructionAddress + \":\" + lineNumber;\n                    \n                    if (parameters.directions && parameters.directions.length > 0) {\n                        let savingInstructions: SceneDirection[] = (JSON.parse(JSON.stringify(parameters.directions)))\n                        .concat(directions.slice(lineNumber + 1));\n\n                        this.storyState.system_instruction_mem[conditionInstructionAddress] = savingInstructions\n        \n                        await this.performInstructions.call(this, conditionInstructionAddress);\n\n                        isTerminatingDirection = true;\n                    }\n                }\n\n                break;\n            }\n            case SceneDirectionType.GO_TO: {\n                let destinationPage: string = parameters.target;\n\n                if (this.storyState[destinationPage] && this.storyState[destinationPage].type == 'sceneID') {\n                    this.playQueue.push({\n                        sceneID: this.storyState[destinationPage].value,\n                        property: parameters.targetSceneProperty || \"narration\"\n                    });\n\n                } else {\n                    this.playQueue.push({\n                        sceneID: destinationPage.toLowerCase(),\n                        property: parameters.targetSceneProperty || \"narration\"\n                    });\n                }\n\n                isTerminatingDirection = true;\n\n                if (ACEDriver.testing) console.log(`${padString(\"GO TO\",8)}\\t>scene '${destinationPage}'`);\n                break;\n            }\n            case SceneDirectionType.SAVE_AND_GO: {\n                let destinationPage: string = parameters.target.toLowerCase();\n                \n                let savingInstructions: SceneDirection[] = directions.slice(lineNumber + 1);\n                \n                let savingAddress: string = instructionAddress + \":\" + lineNumber;\n\n                this.storyState.system_instruction_mem[savingAddress] = savingInstructions;\n                if (!this.storyState.system_call_stack) {\n                    this.storyState.system_call_stack = [];\n                }\n\n                this.storyState.system_call_stack.push(savingAddress);\n\n                if (ACEDriver.testing) console.log(`${padString(\"CALL\",8)}\\t>scene '${destinationPage}'`);\n                \n                this.playQueue.push({\n                    sceneID: destinationPage,\n                    property: parameters.targetSceneProperty || \"narration\"\n                });\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case SceneDirectionType.RETURN: {\n                if (this.storyState.system_call_stack && this.storyState.system_call_stack.length > 0) {\n                    let returnAddress: string = this.storyState.system_call_stack.splice(-1, 1)[0];\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RETURN\",8)}\\t> Returning to address ${returnAddress}.'`);\n\n                    let poppingSceneID: string = returnAddress.split(\":\")[0];\n                    StoryStateHelper.setCurrentSceneID(this.storyState, poppingSceneID);\n                    await this.performInstructions.call(this, returnAddress);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RETURN\",8)}\\t> There is instructions to return to.'`);\n                }\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case SceneDirectionType.RESTART: {\n                await this.resetStory();\n                this.playQueue.push({\n                    sceneID: BuiltInScenes.StartScene,\n                    property: parameters.targetSceneProperty || \"narration\"\n                });\n\n                if (ACEDriver.testing) console.log(`${padString(\"RESTART\",8)}\\t> Refresh and restart the story.`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case SceneDirectionType.REPEAT: {\n                if (this.storyState.system_prevSpeech && this.storyState.system_prevSpeech.length > 0) {\n                    this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevSpeech);\n                    this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n\n                    if (ACEDriver.testing) console.log(`${padString(\"REPEAT\",8)}\\t> Repeating previously heard speech:\\n${JSON.stringify(this.storyState.system_prevSpeech, null, 4)}\\nreprompt:\\n${JSON.stringify(this.storyState.system_prevReprompt, null, 4)}`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"REPEAT\",8)}\\t> Nothing to repeat.'`);\n                }\n\n                this.isRepeating = true;\n                isTerminatingDirection = true;\n\n                break;  \n            }\n            case SceneDirectionType.REPEAT_REPROMPT: {\n                if (this.storyState.system_prevReprompt && this.storyState.system_prevReprompt.length > 0) {\n                    this.stage.setStageSpeechAudioSequence(this.stage.getStageRepromptAudioSequence().concat(this.storyState.system_prevReprompt));\n                    this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RE-REPROMPT\",8)}\\t> Repeating previously heard reprompt:\\n${JSON.stringify(this.storyState.system_prevReprompt, null, 4)}`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RE-REPROMPT\",8)}\\t> Nothing to reprompt.'`);\n                }\n\n                this.isRepeating = true;\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case SceneDirectionType.BACK: {\n                let countBack: number = parameters.count + 1;\n\n                if (!this.storyState.system_originStack || this.storyState.system_originStack.length == 0) {  \n                    if (ACEDriver.testing) console.log(`${padString(\"BACK\",8)}\\t>There is no scene to go back to.`);\n                } else {\n                    let transitionStack: string[] = JSON.parse(JSON.stringify(this.storyState.system_originStack));\n\n                    let destinationScene: any = undefined;\n\n                    while (countBack-- > 0 && transitionStack.length > 0) {\n                        destinationScene = transitionStack.splice(-1, 1)[0];\n                    }\n\n                    this.playQueue.push(destinationScene);\n\n                    this.storyState.system_originStack = transitionStack;\n                    if (ACEDriver.testing) console.log(`${padString(\"BACK\",8)}\\t> back count=${parameters.count} to scene '${JSON.stringify(destinationScene)}'`);\n                }\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case SceneDirectionType.RECAP: {\n                let recapMessage: string[] = substituteSlotValues(parameters.message, this.storyState, false).value\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \")\n                    .split(\"||\");\n\n                let selectedRecap: string = recapMessage[Math.floor(Math.random() * recapMessage.length)];\n\n                if (selectedRecap.trim().length > 0) {\n                    this.stage.appendSceneRecapForeground(this.buildAudioItemsFromSSML(selectedRecap.replace(/\\n/g, ' ').replace(/[\\s]+/g, ' ')));\n    \n                    if (ACEDriver.testing) console.log(`${padString(\"RECAP\",8)}\\t>'${selectedRecap}'`);    \n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RECAP\",8)}\\t>'Nothing to set as recap message.'`);    \n                }\n\n                break;\n            }\n            case SceneDirectionType.END: {\n                StoryStateHelper.setEndingReached(this.storyState, true);\n                await this.resetStory();\n                this.isRepeating = true;\n                \n                if (ACEDriver.testing) console.log(`END`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case SceneDirectionType.PAUSE: {\n                this.isPausing = true;\n                if (ACEDriver.testing) console.log(`PAUSE`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case SceneDirectionType.BGM: {\n                let bgmURL: string = parameters.audioURL;\n        \n                this.stage.appendSceneSpeechBackground(\n                    this.buildAudioItemsFromSSML(`<audio src='${bgmURL}' delay='${parameters.delayMs||\"\"}' volume='${parameters.volume||\"\"}' blend='${parameters.blend}'/>`));\n\n                if (ACEDriver.testing) console.log(`${padString(\"BGM\",8)}\\t>${bgmURL}`);\n                break;\n            }\n            case SceneDirectionType.CLEAR: {\n                let attributeName: string = parameters.variableName;\n\n                if (attributeName.trim() == \"*\") {\n                    attributeName = \"\";\n\n                    for (let key of Object.keys(this.storyState)) {\n                        if (!key.startsWith(\"system_\")) {\n                            attributeName += `${key} ; `;\n                            delete this.storyState[key];\n                        }\n                    }\n\n                } else {\n                    delete this.storyState[attributeName];\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"CLEAR\",8)}\\t>'${attributeName}'`);\n                break;\n            }\n            case SceneDirectionType.ADD_TO_INVENTORY: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n\n                if (!this.storyState[listName]){ \n                    this.storyState[listName] = {};\n                }\n\n                if (!this.storyState[listName][item]) {\n                    this.storyState[listName][item] = 0;\n                }\n\n                this.storyState[listName][item] ++;\n\n                if (ACEDriver.testing) console.log(`${padString(\"ADD INVENTORY\",8)}\\t>'${item}' to '${listName}'`);\n                break;\n            }\n            case SceneDirectionType.ADD_ITEM: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n                let sizeLimit: string = parameters.size || \"-1\";\n\n                if (!this.storyState[listName]){ \n                    this.storyState[listName] = [];\n                }\n\n                this.storyState[listName].push(item);\n\n                let size: number = parseInt(sizeLimit, 10);\n                if (size > 0 && this.storyState[listName].length > size) {\n                    this.storyState[listName].splice(0, this.storyState[listName].length - size);\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"ADD ITEM\",8)}\\t>'${item}' to '${listName}'`);\n                break;\n            }\n            case SceneDirectionType.GET_TIME: {\n                let currentTime: number = new Date().getTime();\n\n                this.storyState.system_return = currentTime;\n\n                if (ACEDriver.testing) console.log(`${padString(\"GET TIME\",8)}\\t>${currentTime}`);\n            }\n            case SceneDirectionType.REMOVE_ITEM: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName] && typeof this.storyState[listName].length == 'number') {\n                    let deletingIndex: number = -1; \n                    for (let i = 0; i < this.storyState[listName].length; i ++) {\n                        if (this.storyState[listName][i] == item) {\n                            deletingIndex = i;\n                            break;\n                        }\n                    }\n\n                    if (deletingIndex >= 0) {\n                       let removeResult: any = this.storyState[listName].splice(deletingIndex, 1)[0];\n                       this.storyState.system_return = removeResult;\n                    }\n                } else if (this.storyState[listName] && typeof this.storyState[listName].length == 'undefined') {\n                    if (typeof this.storyState[listName][item] == 'number' && this.storyState[listName][item] > 0) {\n                        this.storyState[listName][item] --;\n                    } else if (typeof this.storyState[listName][item] != 'number') {\n                        delete this.storyState[listName][item];\n                    }\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>'${item}' from '${listName}'`);\n                break;\n            }\n            case SceneDirectionType.REMOVE_FIRST: {\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName]) {\n                    let removeResult: any = this.storyState[listName].splice(0, 1)[0]\n                    \n                    this.storyState.system_return = removeResult;   \n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>FIRST from '${listName}'`);\n                break;\n            }\n            case SceneDirectionType.REMOVE_LAST: {\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName]) {\n                    let removeResult: any = this.storyState[listName].splice(this.storyState[listName].length - 1, 1); \n                    \n                    this.storyState.system_return = removeResult;\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>LAST from '${listName}'`);\n                break;\n            }\n            case SceneDirectionType.FLAG: {\n                let variableName: string = parameters.variableName;\n\n                this.storyState[variableName] = true;\n\n                if (ACEDriver.testing) console.log(`${padString(\"FLAG\",8)}\\t>'${variableName}'`);\n                break;\n            }\n            case SceneDirectionType.UNFLAG: {\n                let variableName: string = parameters.variableName;\n\n                this.storyState[variableName] = false;\n\n                if (ACEDriver.testing) console.log(`${padString(\"UNFLAG\",8)}\\t>'${variableName}'`);\n                break;\n            }\n            case SceneDirectionType.SET: {\n                let variableName: string = parameters.variableName;\n                let value: number | any = parameters.variableValue == \"undefined\"? 0: parseFloat(parameters.variableValue);\n\n                if (parameters.variableValue.length === 0) {\n                    value = \"\";\n                } else if (isNaN(parameters.variableValue)) {\n                    value = parameters.variableValue;\n\n                    if (value == 'true') {\n                        value = true;\n                    } else if (value == 'false') {\n                        value = false;\n                    }\n                }\n                \n\n                if (this.storyState[variableName] == undefined) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = value;\n\n                if (ACEDriver.testing) console.log(`${padString(\"SET\",8)}\\t>'${variableName}' as ${value}`);\n                break;\n            }\n            case SceneDirectionType.REDUCE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) - value) * 100) / 100;\n                if (ACEDriver.testing) console.log(`${padString(\"REDUCE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case SceneDirectionType.INCREASE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) + value) * 100) / 100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"INCREASE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case SceneDirectionType.MULTIPLY: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) * value) * 100) / 100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"MULTIPLY\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case SceneDirectionType.DIVIDE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) / value) * 100)/100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"DIVIDE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case SceneDirectionType.ROLL: {\n                let rollEval: string = parameters.diceString;\n\n                this.evaluateDiceRoll(rollEval);\n\n                if (ACEDriver.testing) console.log(`${padString(\"ROLL\",8)}\\t>'${rollEval}'`);\n                break;\n            }\n            case SceneDirectionType.REPROMPT: {\n                let repromptMessages: string[] = substituteSlotValues(parameters.message, this.storyState, false).value\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \")\n                    .split(\"||\");\n\n                let selectedReprompt: string = repromptMessages[Math.floor(Math.random() * repromptMessages.length)];\n                this.stage.appendSceneRepromptForeground(\n                    this.buildAudioItemsFromSSML(selectedReprompt.replace(/\\n/g, ' ').replace(/[\\s]+/g, ' ')));\n\n                if (ACEDriver.testing) console.log(`${padString(\"REPROMPT\",8)}\\t>'${selectedReprompt}'`);\n                break;\n            }\n            case SceneDirectionType.VISUALS: {                \n                if (visualAlreadyDefined) {\n                    let currentVisuals: VisualOptions[] = this.stage.getStageVisualOptions() || [];\n                    currentVisuals[currentVisuals.length - 1] = <VisualOptions>parameters;\n\n                    this.stage.setStageVisualOptions(currentVisuals);\n                } else {\n                    visualAlreadyDefined = true;\n                    \n                    this.stage.appendStageVisuals(<VisualOptions>parameters);\n                }\n\n                break;\n            }\n            default: {\n                throw \"[STORY - SYNTAX ERROR] the story effect is not recognized.\\nline number=[\" \n                    + lineNumber + \"]\\nline content=[\"\n                    + JSON.stringify(directions[lineNumber], null, 4) + \"]\\n\"\n                    + \"pageID=[\" + StoryStateHelper.getCurrentSceneID(this.storyState) + \"]\";\n            }\n            }\n \n            if (isTerminatingDirection || lineNumber == directions.length - 1) {\n                delete this.storyState.system_instruction_mem[instructionAddress];\n                break;\n            }\n        }\n\n        return isTerminatingDirection;        \n    }\n\n    /**\n     * Get the scene object of the currently driving story givene the scene ID.\n     * @param sceneID scene ID\n     */\n    public async getSceneByID(sceneID: string): Promise<Scene> {\n        let adjustedSceneID: string = sceneID.trim().toLowerCase();\n\n        let drivingStoryID: string = await this.storyAccessor.getStoryID();\n\n        if (!ACEDriver.STORY_METADATA_CACHE[drivingStoryID]) {\n            let id2Page: {[key: string]: Scene} = {};\n\n            for (let scene of await this.storyAccessor.getAllScenes()) {\n                id2Page[scene.id.toLowerCase()] = scene;\n            }\n\n            ACEDriver.STORY_METADATA_CACHE[drivingStoryID] = id2Page;\n        }\n\n        if (ACEDriver.STORY_METADATA_CACHE[drivingStoryID][adjustedSceneID] || BuiltInScenes.PauseScene.toLowerCase() == adjustedSceneID ||\n            BuiltInScenes.ResumeScene.toLowerCase() == adjustedSceneID) {\n            return ACEDriver.STORY_METADATA_CACHE[drivingStoryID][adjustedSceneID];\n        } else {\n            throw `[ERROR] Cannot find the scene ${adjustedSceneID} from the story=${drivingStoryID}.`; \n        }\n\n    }\n\n    public clearMetadataCache() {\n        ACEDriver.STORY_METADATA_CACHE = {};\n    }\n\n    /**\n     * Compute a dice roll given a standard dice string.\n     * \n     * @param diceString \n     */\n    private evaluateDiceRoll(diceString: string) {        \n        let diceRegex: RegExp = /([\\d])d([\\d]*)+[k]?([\\d]*)/gi\n    \n        let diceMatch: RegExpExecArray|null = diceRegex.exec(diceString);\n    \n        let rollResults: number[] = [];\n        while (diceMatch != null) {\n            let rollResult: number = 0;\n            let diceCount: number = parseInt(diceMatch[1], 10);\n            let faceCount: number = parseInt(diceMatch[2], 10);\n            let selectCount: number = parseInt(diceMatch[3], 10);\n    \n            let rolls: number[] = [];\n            for (let i = 0; i < diceCount; i++) {\n                if (ACEDriver.probabilityOff) {\n                    rolls.push((faceCount + 1) / 2);\n                } else {\n                    rolls.push(Math.floor(Math.random() * faceCount) + 1);\n                }\n            }\n    \n            let sumCount: number = rolls.length;\n            if (selectCount) {\n                rolls.sort().reverse(); //descending sort\n                sumCount = selectCount\n            } \n            \n            for (let i = 0 ; i < sumCount; i++) {\n                rollResult += rolls[i];\n            }\n    \n            rollResults.push(rollResult);\n    \n            diceMatch = diceRegex.exec(diceString);\n        }\n    \n        let diceMatchReplace: string = diceString.replace(diceRegex, () => {\n            return String(rollResults.splice(0, 1)[0]);\n        });\n    \n        let rollFinalEval: any = eval(diceMatchReplace);\n        if (ACEDriver.debug) console.log(\"[DEBUG] Roll result for the entire dice configuration=[\" + diceMatchReplace + \"], result=[\" + rollFinalEval + \"]\" );\n    \n        this.storyState.rollResult = rollFinalEval;\n    }\n\n    /**\n     * Given a string of ssml (supported with voice, audio tags), create an array of Audio Items.\n     * @param ssml string of ssml text\n     */\n    private buildAudioItemsFromSSML(ssml: string): AudioItem[] {\n        let dialogue: string = ssml.trim();\n        \n        let partitioningRegex: RegExp = /(<audio[\\s]+src=[\\\"'][^><]+?[\\\"'][\\s]*?\\/>)|(<voice[\\s]+[\\s\\S]+?<\\/voice>)|([\\s\\S]+?)(?=<audio|<voice|$)/g;\n    \n        let partitionMatch: string[] | null = partitioningRegex.exec(dialogue);\n    \n        let audioItems: AudioItem[] = [];\n        while (partitionMatch != null) {\n            \n            if (partitionMatch[1] && partitionMatch[1].trim().length > 0) {\n                let audioTagParse: RegExp = /\\b(src|volume|delay|blend)=[\\\"']([\\S]+?)[\\\"']/g;\n    \n                let audioTagText: string = partitionMatch[1];\n                let audioTagMatch: any = audioTagParse.exec(audioTagText);\n    \n                let volume: number = 1.0;\n                let delay: number = 0;\n                let content: string = \"\";\n                let blendOption: string = AudioBlendOption.TRIM;\n                while (audioTagMatch != null) {\n\n                    if (!audioTagMatch[2] || audioTagMatch[2].trim().length <= 0) {\n                        // skip for no attribute value\n                    } else if (audioTagMatch[1].trim() == \"src\") {\n                        content = audioTagMatch[2]\n                    } else if (audioTagMatch[1].trim() == \"volume\") {\n                        volume = parseFloat(audioTagMatch[2]);\n                    } else if (audioTagMatch[1].trim() == \"delay\") {\n                        delay = parseInt(audioTagMatch[2]);\n                    } else if (audioTagMatch[1].trim() == \"blend\") {\n                        blendOption = audioTagMatch[2];\n                    }\n\n                    audioTagMatch = audioTagParse.exec(audioTagText);\n                }\n    \n                audioItems.push({\n                    type: AlexaAudioType.AUDIO,\n                    content: content,\n                    volume: volume,\n                    delay: delay,\n                    options: {\n                        blend: blendOption\n                    }\n                });\n            } else if (partitionMatch[2] && partitionMatch[2].trim().length > 0) {   \n                \n                let pollyTagParse: RegExp = /<voice[\\s]+[\\s\\S]*?(name|volume|delay|pitch|rate)=[\\\"']([\\S]+?)[\\\"'][\\s\\S]*?>/g;\n    \n                let pollyTagText: string = partitionMatch[2];\n                \n                let pollyTagMatch: any = pollyTagParse.exec(pollyTagText);\n    \n                let name: string = \"\";\n                let volume: number = 3.0;\n                let delay: number = 0;\n                let rate: string = \"\";\n                let pitch: string = \"\";\n                while (pollyTagMatch != null) {\n                    if (!pollyTagMatch[2] || pollyTagMatch[2].trim().length <= 0) {\n                        // skip for no attribute value\n                    } else if (pollyTagMatch[1].trim() == \"name\") {\n                        name = pollyTagMatch[2];\n                    } else if (pollyTagMatch[1].trim() == \"volume\") {\n                        volume = parseFloat(pollyTagMatch[2]);\n                    } else if (pollyTagMatch[1].trim() == \"delay\") {\n                        delay = parseInt(pollyTagMatch[2]);\n                    } else if (pollyTagMatch[1].trim() == \"pitch\") {\n                        pitch = pollyTagMatch[2];\n                    } else if (pollyTagMatch[1].trim() == \"rate\") {\n                        rate = pollyTagMatch[2];\n                    }\n    \n                    pollyTagMatch = pollyTagParse.exec(pollyTagText);\n                }\n    \n                let contentMatch: any = />([\\s\\S]*?)<\\/voice/g.exec(pollyTagText);\n    \n                audioItems.push({\n                    type: AlexaAudioType.POLLY,\n                    content: contentMatch[1],\n                    volume: volume,\n                    delay: delay,\n                    options: {\n                        pitch: pitch,\n                        rate: rate,\n                        voice: name\n                    }\n                });\n            } else if (this.isPollyAsDefault) {\n                if (partitionMatch[3].trim().length > 0) {\n                    audioItems.push({\n                        type: AlexaAudioType.POLLY,\n                        content: partitionMatch[3],\n                        volume: this.volume,\n                        delay: 0,\n                        options: {\n                            pitch: this.pitch,\n                            rate: this.rate,\n                            voice: this.voiceName\n                        }\n                    });\n                }\n            } else {\n                if (partitionMatch[3].trim().length > 0) {\n                    audioItems.push({\n                        type: AlexaAudioType.TEXT,\n                        content: partitionMatch[3],\n                        volume: 3.0,\n                        delay: 0\n                    });\n                }\n            }\n    \n            partitionMatch = partitioningRegex.exec(dialogue);\n        }\n    \n        return audioItems;\n    }\n}\n\nfunction substituteSlotValues(line : string, eventParams : any, isCondition : boolean = true) : any {\n    // Now substitute in all the {variable1}, {variable2}, etc. fields\n    let regex = /\\{([^{}]*?)\\}/g;\n\n    let matches = line.match(regex);\n    \n    let allSlotsFilled : boolean = true;\n\n    while(matches) {\n        let slotsToFill : any = {};\n\n        // Find all the replacement slot names\n        for(const match of matches) {\n            slotsToFill[match] = 1;\n        }\n\n        let keys = Object.keys(slotsToFill);\n        \n        for(let keyOriginal of keys) {\n            // Remove the opening and closing { } signs and single quotes within the key\n            let key = keyOriginal.substr(1, keyOriginal.length - 2).replace(/\\'/g,\"\");\n\n            line = line.replace(new RegExp(\"\\\\{\" + keyOriginal.substr(1, keyOriginal.length - 2) + \"\\\\}\",\"g\"), \"{\" + key + \"}\");\n\n            if (key.split(\".\").length > 1 ) {\n                let splitKey:string[] = key.split(\".\");\n                let crawl:any = eventParams[splitKey[0].replace(/'/g, \"\")];\n                for (let i = 1; i < splitKey.length; i++) {\n\n                    if (crawl != undefined) {\n                        crawl = crawl[splitKey[i]];\n\n                        if(crawl != undefined && i == splitKey.length - 1) {\n                            let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                            let re = new RegExp(find, 'g');\n                    \n                            let value: any = crawl;\n        \n                            line = line.replace(re, value);\n                        } if (crawl == undefined) {\n                            let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                            let re = new RegExp(find, 'g');\n\n                            let value: any = crawl;\n\n                            line = line.replace(re, \"undefined\");\n                        }\n                    } else {\n                        let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                        let re = new RegExp(find, 'g');\n\n                        line = line.replace(re, \"false\");\n\n                        allSlotsFilled = true;\n                    }\n                }\n            } else {\n                if(eventParams[key.replace(/'/g, \"\")] != undefined) {\n                    let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                    let re = new RegExp(find, 'g');\n            \n                    let value: any = eventParams[key.replace(/'/g, \"\")];\n                    if (isNaN(value) && isCondition) {\n                        value =  \"'\" + value + \"'\";\n                    }\n\n                    line = line.replace(re, value);\n\n                } else {\n                    let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                    let re = new RegExp(find, 'g');\n\n                    line = line.replace(re, \"false\");\n\n                    allSlotsFilled = true;\n                }\n            }\n        }\t\t\n\n        matches = line.match(regex);\n    }\n\n    return { value: line, allSlotsFilled : allSlotsFilled};\n}\n\n// Evalute the given string given the limited context given\nfunction evalInContext(js : string, context : any) {\n    //# Return the results of the in-line anonymous function we .call with the passed context\n    return function() { return eval(js.replace(/\\bundefined\\b/g, \"false\")); }.call(context);\n}\n\n/*\n`\n<prosody rate=\"${rate}\" pitch=\"${pitch}\">\n<amazon:effect name=\"drc\" vocal-tract-length=\"+0%\">\n<amazon:auto-breaths>\n${partitionMatch[0]}\n</amazon:auto-breaths>\n</amazon:effect>\n</prosody> \n\naudioBuilder.addPollySequence({name: voiceName, text: textWithVoiceMarkup, delayMs: 100, volume: volume});\nlet outputUrl = await buildAudio(audioBuilder);\n\nresultDialogue += AlexaUtil.wrapAudioTag(outputUrl);\n`*/\n\nfunction check(pre:string, before:any, after:any) {\n    let padSize: any = process.env.ABC_DEBUG_PAD_SIZE || 20;\n\n    if ((before === undefined && after !== undefined) || (before !== undefined && after === undefined)) {\n        console.log(`[${padString(pre,padSize)}\\t|\\t${padString(JSON.stringify(before),padSize)}\\t>>>\\t${padString(JSON.stringify(after), padSize)}]`);\n        return;\n    }\n\n    if (after == undefined || after == null) {\n        return;\n    }\n\n    for (let key of Object.keys(after)) {\n        if (typeof after[key] === \"object\") {\n            check(pre + \".\" +  key, before[key], after[key]);\n        } else {\n            if (before[key] !== after[key]) {\n                if (pre.length > 0) {\n                    console.log(`[${padString(pre + \".\" + key, padSize)}\\t|\\t${padString(before[key], padSize)}\\t>>>\\t${padString(after[key], padSize)}]`);\n                } else {\n                    console.log(`[${padString(key, padSize)}\\t|\\t${padString(before[key], padSize)}\\t>>>\\t${padString(after[key], padSize)}]`);\n                }\n            }\n        }\n    }\n    return;\n}\n\nfunction getStateDiffs(before:any, after:any): StateDiffItem[] {\n    let stateDiffs: StateDiffItem[] = [];\n    // check removed items\n    for (let key of Object.keys(before)) {\n        if (before[key] && after[key] === undefined) {\n            stateDiffs.push({\n                itemName: key,\n                beforeValue: JSON.parse(JSON.stringify(before[key])),\n                afterValue: undefined\n            });\n        }\n    }\n\n    for (let key of Object.keys(after)) {\n        if (JSON.stringify(after[key]) != JSON.stringify(before[key])) {\n            stateDiffs.push({\n                itemName: key,\n                beforeValue: before[key]? JSON.parse(JSON.stringify(before[key])) : undefined,\n                afterValue: JSON.parse(JSON.stringify(after[key]))\n            });\n        }\n    }\n\n    return stateDiffs;\n}\n\nfunction padString(incomingText: string, length: number) {\n    let text: string = String(incomingText);\n\n    let result: string = text;\n    if (text.length < length) {\n        for (let i = 0 ; i <= length - text.length; i ++) {\n            result += \" \";\n        }\n    } else {\n        result = \"~\" + result.substring(text.length - length);\n    }\n    return result;\n}"]}