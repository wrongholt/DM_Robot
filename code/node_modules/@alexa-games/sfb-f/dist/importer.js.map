{"version":3,"file":"importer.js","sourceRoot":"","sources":["../importer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * abc-importer\n * \n * Imports and exports between various branched content formats and the Alexa Branching Content (ABC) format.\n */\nimport * as fs from \"fs\";\n\nimport { DefaultFormatImportPlugin } from './importPlugins/DefaultFormatImportPlugin';\n\nimport { AlexaABCVerifier } from \"./verificationHandlers/alexa-abc-verifier\";\nimport { ABCImportPlugin, ABCExporter, StoryMetadata, SceneDirectionType, ImportResult, ImportErrorLine, ImportError } from \"./aceEntities/interfaces\";\nimport { ModelBaker } from \"./bakeUtilities/VoiceModelBaker\";\nimport { DriverExtension, ImporterExtension, InstructionExtension,\n\tisDriverExtension, isImporterExtension, isInstructionExtension } from \"./extensions/ACEExtension\";\nimport { StoryMetadataHelper } from \"./importPlugins/storyMetadataHelper\";\nimport { SourceContentHelper } from \"./importPlugins/sourceContentHelper\";\n\nexport interface ContentItem {\n    id?: string,\n    text: string\n}\n\nexport class ACEImporter\n{\t\n\timportHandlersByType : {[key: string] : ABCImportPlugin} = {};\n\t\n\texportHandlersByType : {[key: string] : ABCExporter} = {};\n\n\timportExtensions: (DriverExtension|ImporterExtension|InstructionExtension)[] = [];\n\n\tverifier : AlexaABCVerifier = new AlexaABCVerifier();\n\n\t// Constructor\n\tpublic constructor(customImporters?: ABCImportPlugin[], customerExporters?: {[key: string]: ABCExporter}, extensions?: (DriverExtension|ImporterExtension|InstructionExtension)[]) {\n\t\tlet importPlugins: ABCImportPlugin[] = [\n\t\t\tnew DefaultFormatImportPlugin()\n\t\t];\n\t\t\n\t\tif (customImporters) {\n\t\t\timportPlugins = importPlugins.concat(customImporters);\n\t\t}\n\n\t\tfor (let importPlug of importPlugins) {\n\t\t\tthis.importHandlersByType[importPlug.pluginName] = importPlug;\n\t\t}\n\n\t\tif (customerExporters) {\n\t\t\tObject.assign(this.exportHandlersByType, customerExporters);\n\t\t}\n\n\t\tif(extensions) {\n\t\t\tthis.importExtensions = extensions;\n\t\t}\n\t}\n\t\n\tpublic async importABCStory(format : string, filename : string, storyTitle: string, storyID: string, autoIntentGrouping?: boolean, param: {[key: string]: any} = {}): Promise<StoryMetadata> {\n\t\tlet contents: ContentItem[] = [];\n\n\t\tif (param.content) {\n\t\t\tcontents.push({\n\t\t\t\tid: \"default\",\n\t\t\t\ttext: param.content\n\t\t\t});\n\t\t} else if (param.contents) {\n\t\t\tcontents = param.contents;\n\t\t} else {\n\t\t\tcontents.push({\n\t\t\t\tid: filename,\n\t\t\t\ttext: fs.readFileSync(filename, { encoding: 'utf8' })\n\t\t\t});\n\t\t}\n\t\t\n\n\t\tfor (let extension of this.importExtensions) {\n\t\t\tif (isImporterExtension(extension)) {\n\t\t\t\tconst sourceHelper = new SourceContentHelper(contents);\n\t\t\t\tawait extension.extendSourceContent(sourceHelper);\n\t\t\t\tparam.contents = sourceHelper.getAllSourceContents();\n\t\t\t}\n\t\t}\n\n\t\tlet importHandler : ABCImportPlugin = this.importHandlersByType[format];\n\n\t\tconst contentVersion: number = param.version;\n\t\tconst optimalVersion = importHandler.getVersion();\n\t\tif (optimalVersion < contentVersion) {\n\t\t\tthrow new Error(`Unsupported Language Version: Importer expected content version ${optimalVersion}, but detected version ${contentVersion}.`);\n\t\t}\n\n\t\tlet thisObj = this;\n\t\ttry {\n\t\t\tconst importResult: ImportResult = await importHandler.importData(contents, param);\n\t\t\tconst importedScenes = importResult.importedScenes;\n\t\t\tconst importErrors = importResult.errors || [];\n\n\t\t\tlet jsonObjOutput: StoryMetadata = {\n\t\t\t\tpluginName: importHandler.pluginName,\n\t\t\t\tscenes: importedScenes,\n\t\t\t\tstoryID: storyID,\n\t\t\t\tstoryTitle: storyTitle\n\t\t\t}\n\n\t\t\tfor (let extension of this.importExtensions) {\n\t\t\t\ttry {\n\t\t\t\t\tif (isImporterExtension(extension)) {\n\t\t\t\t\t\tconst metadataHelper = new StoryMetadataHelper(jsonObjOutput);\n\t\t\t\t\t\tawait extension.extendImportedContent(metadataHelper);\n\t\t\t\t\t\tjsonObjOutput = await metadataHelper.getStoryMetadata();\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconst extensionError: ImportErrorLine = {\n\t\t\t\t\t\tlineNumber: 0,\t\t\t\t\t\t\n\t\t\t\t\t\terrorMessage: err,\n\t\t\t\t\t\terrorName: `Import Extension Error on ${extension.constructor.name}`\n\t\t\t\t\t};\n\n\t\t\t\t\timportErrors.push(extensionError);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!param.ignoreSyntaxError) {\n\t\t\t\tconst finalError = await thisObj.verifier.verify(jsonObjOutput);\n\t\t\t\tfinalError.forEach((errorItem) => {\n\t\t\t\t\timportErrors.push(errorItem);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlet voiceModel: any = await ModelBaker.bake(!!autoIntentGrouping, jsonObjOutput, importHandler, param.locale);\n\t\t\t\tif (autoIntentGrouping) {\n\t\t\t\t\tjsonObjOutput.alexaVoiceModel = voiceModel;\t\n\t\t\t\t} else {\n\t\t\t\t\tlet allUtterances: any = {};\n\n\t\t\t\t\tfor (let scene of jsonObjOutput.scenes) {\n\t\t\t\t\t\tfor (let content of scene.contents) {\n\t\t\t\t\t\t\tif (content.sceneDirections) {\n\t\t\t\t\t\t\t\tfor (let direction of content.sceneDirections) {\n\t\t\t\t\t\t\t\t\tif (direction.directionType == SceneDirectionType.CHOICE) {\n\t\t\t\t\t\t\t\t\t\tallUtterances[direction.parameters.utterances] = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tjsonObjOutput.alexaVoiceModel = Object.keys(allUtterances);\t\n\t\t\t\t}\n\t\t\t} catch(err) {\n\t\t\t\timportErrors.push({\n\t\t\t\t\terrorName: \"VoiceModelBuildError\",\n\t\t\t\t\tlineNumber: 0,\n\t\t\t\t\terrorMessage: err\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (importErrors && importErrors.length > 0) {\n\t\t\t\tthrow (<ImportError> {\n\t\t\t\t\terrorItems: importErrors,\n\t\t\t\t\timportedData: jsonObjOutput\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn jsonObjOutput;\n\t\t\t}\n\t\t\t\n\t\t} catch(err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic exportTo(format : string, filename : string, outputFilename : string) {\n\n\t\tlet fileData = fs.readFileSync(filename, { encoding: 'utf8' });\n\n\t\tlet jsonInputObj = JSON.parse(fileData);\n\n\t\tlet exportHandler : ABCExporter = this.exportHandlersByType[format];\n\n\t\tconsole.log(this.exportHandlersByType);\n\n\t\texportHandler.exportData(jsonInputObj, function(outputData : {}) {\n\n\t\t\tconsole.log(\"Output Data:\");\n\t\t\tconsole.log(outputData);\n\t\t\n\t\t\tfs.writeFileSync(outputFilename, outputData);\n\t\t});\n\t}\n}\n"]}