"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
exports.POSITIVE_TEST_STORY_DIRECTORY = './test/positive_test_cases';
exports.NEGATIVE_TEST_STORY_DIRECTORY_MISSING_START = './test/negative_test_cases/missing_start_scene';
exports.GLOBAL_TEST_STORY_DIRECTORY = './test/global_test_cases';
function loadTestStory(storyFileDirectory, fileName) {
    const fullPath = path.resolve(path.join(storyFileDirectory, fileName));
    // console.log(`fullPath=${fullPath}`);
    return fs.readFileSync(fullPath, {
        encoding: "utf8"
    });
}
exports.loadTestStory = loadTestStory;
function loadTestResource(storyFileDirectory, fileName) {
    const fullPath = path.resolve(path.join(storyFileDirectory, 'resources', fileName));
    // console.log(`fullPath=${fullPath}`);
    return fs.readFileSync(fullPath, {
        encoding: "utf8"
    });
}
exports.loadTestResource = loadTestResource;
function loadTestResourceAsObject(storyFileDirectory, fileName) {
    const fullPath = path.resolve(path.join(storyFileDirectory, 'resources', fileName));
    // console.log(`fullPath=${fullPath}`);
    return JSON.parse(fs.readFileSync(fullPath, {
        encoding: "utf8"
    }));
}
exports.loadTestResourceAsObject = loadTestResourceAsObject;
function loadAllContent(storyFileDirectory, storyFileList) {
    const contentList = [];
    for (let storyFile of storyFileList) {
        contentList.push({
            id: storyFile,
            text: loadTestStory(storyFileDirectory, storyFile)
        });
    }
    return contentList;
}
exports.loadAllContent = loadAllContent;
function getISPMapping(storyFileDirectory, ispFile) {
    let ispJSON = JSON.parse(loadTestResource(storyFileDirectory, ispFile));
    let ispMapping = {};
    for (let i = 0; i < ispJSON.length; i++) {
        ispMapping[ispJSON[i].productName] = ispJSON[i].ISPID;
    }
    return ispMapping;
}
exports.getISPMapping = getISPMapping;
//# sourceMappingURL=storyUtilities.js.map