{"version":3,"file":"voiceModelBaker.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/bakeUtilities/voiceModelBaker.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {numberToAlphabetCounting} from './../../../bakeUtilities/VoiceModelBaker';\nimport { strict as assert } from 'assert';\n\ndescribe(\"auto voicemodel generating utility test\", function () {\n    it(\"Slot Number to Alphabet Conversion\", async function () {\n        assert.equal(numberToAlphabetCounting(0), 'a');\n        assert.equal(numberToAlphabetCounting(1), 'b');\n        assert.equal(numberToAlphabetCounting(2), 'c');\n        assert.equal(numberToAlphabetCounting(3), 'd');\n        assert.equal(numberToAlphabetCounting(4), 'e');\n        assert.equal(numberToAlphabetCounting(5), 'f');\n        assert.equal(numberToAlphabetCounting(6), 'g');\n        assert.equal(numberToAlphabetCounting(7), 'h');\n        assert.equal(numberToAlphabetCounting(8), 'i');\n        assert.equal(numberToAlphabetCounting(9), 'j');\n        assert.equal(numberToAlphabetCounting(10), 'k');\n        assert.equal(numberToAlphabetCounting(11), 'l');\n        assert.equal(numberToAlphabetCounting(12), 'm');\n        assert.equal(numberToAlphabetCounting(13), 'n');\n        assert.equal(numberToAlphabetCounting(14), 'o');\n        assert.equal(numberToAlphabetCounting(15), 'p');\n        assert.equal(numberToAlphabetCounting(16), 'q');\n        assert.equal(numberToAlphabetCounting(17), 'r');\n        assert.equal(numberToAlphabetCounting(18), 's');\n        assert.equal(numberToAlphabetCounting(19), 't');\n        assert.equal(numberToAlphabetCounting(20), 'u');\n        assert.equal(numberToAlphabetCounting(21), 'v');\n        assert.equal(numberToAlphabetCounting(22), 'w');\n        assert.equal(numberToAlphabetCounting(23), 'x');\n        assert.equal(numberToAlphabetCounting(24), 'y');\n        assert.equal(numberToAlphabetCounting(25), 'z');\n        assert.equal(numberToAlphabetCounting(26), 'ba');\n        assert.equal(numberToAlphabetCounting(27), 'bb');\n        assert.equal(numberToAlphabetCounting(100), 'dw');\n    });\n});"]}