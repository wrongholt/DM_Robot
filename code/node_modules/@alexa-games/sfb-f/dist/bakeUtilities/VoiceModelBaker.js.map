{"version":3,"file":"VoiceModelBaker.js","sourceRoot":"","sources":["../../bakeUtilities/VoiceModelBaker.ts"],"names":[],"mappings":"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","sourcesContent":["import { StoryMetadata, ABCImportPlugin, SceneDirection, SceneDirectionType } from '../aceEntities/interfaces';\nimport { InteractionModelBuilder, IIntentBuilder, ISlotBuilder, ICustomSlotTypeBuilder } from '@alexa-games/sfb-util';\nimport { BUILT_IN_INTENT_UTTERANCES } from './BuiltInIntents';\n\nexport class ModelBaker {\n    static async bake(autoIntentGrouping: boolean, story: StoryMetadata, importer: ABCImportPlugin, _locale: string = 'en'): Promise<any> {\n        let locale: string = _locale;\n        if (!BUILT_IN_INTENT_UTTERANCES[locale] && BUILT_IN_INTENT_UTTERANCES[locale.split(\"-\")[0]]) {\n            locale = locale.split(\"-\")[0];\n        }\n\n        let choiceGrouping: {[key: string]: string} = {};\n    \n        for (let intentName in BUILT_IN_INTENT_UTTERANCES[locale]) {\n            for (let utterance of BUILT_IN_INTENT_UTTERANCES[locale][intentName]) {\n                choiceGrouping[utterance.toLowerCase()] = intentName;\n            }\n        }\n        let slotTracker: any = {};\n\n        if (autoIntentGrouping) {\n            let slotCount = 0;\n\n            for (let scene of story.scenes) {            \n                for (let content of scene.contents) {\n                    if (content.sceneDirections) {\n                        let directionQueue: SceneDirection[] = JSON.parse(JSON.stringify(content.sceneDirections));\n                        \n                        let choiceDirections: SceneDirection[] = [];\n\n                        while (directionQueue.length > 0) {\n                            let verifyingDirection: SceneDirection = directionQueue.splice(0, 1)[0];\n                            \n                            if (verifyingDirection.directionType === SceneDirectionType.SLOT) {\n                                let name: string = verifyingDirection.parameters.variableName;\n                                let type: string = verifyingDirection.parameters.variableType;\n\n                                slotTracker[name] = type;\n\n                            } else if (verifyingDirection.directionType === SceneDirectionType.CHOICE) {                                    \n                                verifyingDirection.parameters.utterances = JSON.parse(JSON.stringify(verifyingDirection.parameters.utterances).replace(/{([\\s\\S]+?)(?: as ([\\s\\S]+?))?}/g, function(match: any, p1: string, p2: string) {\n                                    if (p1 && !p2 && slotTracker[p1]) {\n                                        return `{${slotTracker[p1]} as ${p1}}`;\n                                    }\n\n                                    return match;\n                                }));\n\n                                choiceDirections.push(verifyingDirection);\n                            } else if (verifyingDirection.directionType === SceneDirectionType.CONDITION) {\n                                directionQueue = directionQueue.concat(verifyingDirection.parameters.directions);\n                            }\n                        }\n\n                        convertDecisions2Groups.call(this, choiceGrouping, choiceDirections, function(choice: any) {\n                            return choice.parameters.utterances;\n                        }, locale, slotCount);\n                    }\n                }\n            }\n        }\n\n        for (let scene of story.scenes) {            \n            for (let bodyContent of scene.contents) {\n                if (bodyContent.sceneDirections) {\n                    for (let directionIndex in bodyContent.sceneDirections) {\n                        if (bodyContent.sceneDirections[directionIndex].parameters.utteranceGrouped) {\n                            delete bodyContent.sceneDirections[directionIndex].parameters.utteranceGrouped;\n                        }\n                    }\n                }\n            }\n        }\n\n        return buildVoiceModelWithGrouping(choiceGrouping, \"\", importer, locale);\n    }\n}\n\nconst SLOT_VERSION_BASE: number = 26;\nconst A_CHAR_CODE: number = 'a'.charCodeAt(0);\n\nexport function numberToAlphabetCounting(i: number) {\n    const base26Count = i.toString(SLOT_VERSION_BASE);\n\n    const alphaBaseCount = base26Count.replace(/./g, (match): string => {\n        if (isNaN(parseInt(match, 10))) {\n            return String.fromCharCode(match.charCodeAt(0) + 10);\n        } else {\n            return String.fromCharCode(A_CHAR_CODE + parseInt(match, 10));\n        }\n    });\n\n    return alphaBaseCount;\n}\n\nfunction convertDecisions2Groups(grouping: {[key:string] : string}, choices: any[], parsingFunction: (choice: any) => string[], locale: string, slotCount: number): void {\n    for (let intentName in BUILT_IN_INTENT_UTTERANCES[locale]) {\n        for (let utterance of BUILT_IN_INTENT_UTTERANCES[locale][intentName]) {\n            grouping[utterance] = intentName;\n        }\n    }\n\n    let crossReference: {[key:string] : number} = {};\n\n    let decisionIndex: number = 0;\n    for (let choice of choices) {\n        let words: string[] = parsingFunction(choice);\n        let groupNameToApply: string | undefined = undefined;\n\n        // find already existing group\n        for (let word of words) {            \n            if (word != \"$auto\" && word != \"*\" ) {\n                let groupName = grouping[word.trim()];\n                \n                if ((groupName && groupName.startsWith(\"AMAZON.\")) || BUILT_IN_INTENT_UTTERANCES[locale][word.trim()]) {\n                    continue;\n                } else if (groupName) {\n                    if (crossReference[groupName] != undefined && crossReference[groupName] < decisionIndex) {\n                        grouping[word.trim()] = `${numberToAlphabetCounting(slotCount)}Slot`;\n                        slotCount++;\n                    } else {\n                        groupNameToApply = groupName;\n                        crossReference[groupNameToApply] = decisionIndex;\n                    }\n                } else if (!groupNameToApply) {\n                    groupNameToApply = `${numberToAlphabetCounting(slotCount)}Slot`;\n                    slotCount++;\n                    crossReference[groupNameToApply] = decisionIndex;\n                }\n            }\n        }\n\n        for (let word of words) {\n            if (word != \"$auto\") {\n                if (!grouping[word.trim()] && groupNameToApply) {\n                    grouping[word.trim()] = groupNameToApply;\n                }\n            }\n        }\n\n        decisionIndex++;\n    }\n}\n\nfunction buildVoiceModelWithGrouping(grouping: {[key: string]: string}, invocationName: string, importer: ABCImportPlugin, locale: string): any {\n    let groupToContent: {[key:string]: string[]} = {};\n    for (let key in grouping) {\n        let groupName: string = grouping[key];\n        let wordValue: string = key.trim();\n\n        if (!groupToContent[groupName]) {\n            groupToContent[groupName] = [];\n        }\n\n        groupToContent[groupName].push(wordValue);\n    }\n\n    let interactionModelBuilder: InteractionModelBuilder = new InteractionModelBuilder();\n\n    interactionModelBuilder.withIntent((customIntentBuilder: IIntentBuilder) => {\n            customIntentBuilder.withIntentName(\"FlexibleAnswerIntent\");\n\n            let alreadyUsedSlotName: any = {};\n            let alreadyCreatedSlotType: any = {};\n\n            for (let slotName in groupToContent) {\n                let customValues: string[] = [];\n                let utteranceStructures: string[] = [];\n\n                for (let customValue of groupToContent[slotName]) {\n                    if (customValue.match(/{[\\s\\S]+?}/g)) {\n                        // custom value has slots, should bubble up as sample utterance\n                        utteranceStructures.push(customValue);\n                    } else {\n                        customValues.push(customValue);\n                    }\n                }\n\n                if (customValues && customValues.length > 0 && !BUILT_IN_INTENT_UTTERANCES[locale][slotName]) {\n                    customIntentBuilder\n                        .withSampleUtterance(`{${slotName}}`);\n                    \n                    if (!alreadyUsedSlotName[slotName]) {\n                        customIntentBuilder\n                        .withSlot((slotBuilder: ISlotBuilder) => slotBuilder\n                            .withSlotName(slotName)\n                            .withCustomSlotType(slotName));\n\n                        interactionModelBuilder.withCustomSlotType((customSlotTypeBuilder: ICustomSlotTypeBuilder) => {\n                            customSlotTypeBuilder.withCustomSlotTypeName(slotName)\n                                .withCustomValues(() => customValues)\n                            });\n\n                        alreadyUsedSlotName[slotName] = true;\n                    }\n                }\n\n                for (let utteranceStructure of utteranceStructures) {\n                    let utteranceFinal: string = utteranceStructure;\n                    \n                    let slotRegex: RegExp = /{([\\s\\S]+?)(?: as ([\\s\\S]+?))?}/g;\n                    let slotMatch: any = slotRegex.exec(utteranceStructure);\n                    while (slotMatch != null) {\n                        let slotType: string = slotMatch[1].trim();\n\n                        let slotName: string = slotType;\n                        if (slotMatch[2] && slotMatch[2].length > 0) {\n                            slotName = slotMatch[2].trim();\n\n                            utteranceFinal = utteranceFinal.replace(slotMatch[0], `{${slotName}}`);\n                        }\n\n                        if (!alreadyUsedSlotName[slotName]) {\n                            customIntentBuilder.withSlot((slotBuilder: ISlotBuilder) => slotBuilder\n                                .withSlotName(slotName)\n                                .withCustomSlotType(slotType));\n\n                            if (!slotType.startsWith(\"AMAZON.\")) {\n                                if (!importer.parameters.customSlots || !importer.parameters.customSlots[slotType]) {\n                                    throw new Error(`[Error] Voice Model Generation: Could not find the values for custom slot type=${slotType}`);\n                                }\n\n                                if (!alreadyCreatedSlotType[slotType]) {\n                                    interactionModelBuilder.withCustomSlotType((customSlotTypeBuilder: ICustomSlotTypeBuilder) => {\n                                        customSlotTypeBuilder\n                                            .withCustomSlotTypeName(slotType)\n                                            .withCustomValues(() => importer.parameters.customSlots[slotType])\n                                        });\n\n                                        alreadyCreatedSlotType[slotType] = true;\n                                }\n                                \n                            }\n\n                            alreadyUsedSlotName[slotName] = true;\n                        }\n\n                        \n                        slotMatch = slotRegex.exec(utteranceStructure);\n                    }\n\n                    customIntentBuilder.withSampleUtterance(utteranceFinal);\n\n                }\n            }\n        }\n    );\n\n    for (let slotName in groupToContent) {\n        if (BUILT_IN_INTENT_UTTERANCES[locale][slotName]) {\n            interactionModelBuilder\n                .withIntent((x: IIntentBuilder) => x\n                    .withIntentName(slotName)\n                    .withSampleUtterances(() => groupToContent[slotName]));\n        }\n    }\n\n    let interactionModel: any = interactionModelBuilder.build();\n\n    interactionModel.languageModel.invocationName = invocationName;\n    \n    return interactionModel;\n}"]}