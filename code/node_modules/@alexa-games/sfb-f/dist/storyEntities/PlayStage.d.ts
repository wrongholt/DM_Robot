import { SceneAudioItem, VisualOptions, AudioItem } from '../aceEntities/interfaces';
export declare class PlayStage {
    private visitedSceneIDsOnRun;
    private speechAudioSequence;
    private repromptAudioSequence;
    private recapAudioSequence;
    private visualOptions;
    private currentSceneAudioQueue;
    private currentSceneRepromptAudioQueue;
    private currentSceneRecapAudioQueue;
    constructor();
    resetStage(): void;
    logVisitedScene(sceneID: string): void;
    getStageSpeechAudioSequence(): SceneAudioItem[];
    getStageRepromptAudioSequence(): SceneAudioItem[];
    getStageRecapAudioSequence(): SceneAudioItem[];
    getStageVisualOptions(): VisualOptions[] | undefined;
    setStageSpeechAudioSequence(audio: SceneAudioItem[]): void;
    setStageRepromptAudioSequence(audio: SceneAudioItem[]): void;
    setStageRecapAudioSequence(audio: SceneAudioItem[]): void;
    setStageVisualOptions(visuals: VisualOptions[]): void;
    appendStageSpeechAudioSequence(audio: SceneAudioItem[]): void;
    appendStageRepromptAudioSequence(audio: SceneAudioItem[]): void;
    appendStageRecapAudioSequence(audio: SceneAudioItem[]): void;
    appendStageVisuals(visuals: VisualOptions): void;
    startNewScene(): void;
    appendSceneSpeechForeground(audioItem: AudioItem[]): void;
    appendSceneSpeechBackground(audioItem: AudioItem[]): void;
    appendSceneRepromptForeground(audioItem: AudioItem[]): void;
    appendSceneRepromptBackground(audioItem: AudioItem[]): void;
    appendSceneRecapForeground(audioItem: AudioItem[]): void;
    appendSceneRecapBackground(audioItem: AudioItem[]): void;
    getSpeechSceneAudio(): SceneAudioItem;
    getRepromptSceneAudio(): SceneAudioItem;
    getRecapSceneAudio(): SceneAudioItem;
    closeScene(): void;
    private condensePollyItem;
}
