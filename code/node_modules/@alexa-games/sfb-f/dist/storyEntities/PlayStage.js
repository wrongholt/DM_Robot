"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("../aceEntities/interfaces");
class PlayStage {
    constructor() {
        this.visitedSceneIDsOnRun = [];
        this.speechAudioSequence = [];
        this.repromptAudioSequence = [];
        this.recapAudioSequence = [];
        this.visualOptions = undefined;
        this.currentSceneAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRepromptAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRecapAudioQueue = {
            foreground: [],
            background: []
        };
        this.resetStage();
    }
    resetStage() {
        this.visitedSceneIDsOnRun = [];
        this.speechAudioSequence = [];
        this.repromptAudioSequence = [];
        this.recapAudioSequence = [];
        this.visualOptions = undefined;
        this.currentSceneAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRepromptAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRecapAudioQueue = {
            foreground: [],
            background: []
        };
    }
    logVisitedScene(sceneID) {
        this.visitedSceneIDsOnRun.push(sceneID);
    }
    getStageSpeechAudioSequence() {
        return this.condensePollyItem(this.speechAudioSequence);
    }
    getStageRepromptAudioSequence() {
        return this.condensePollyItem(this.repromptAudioSequence);
    }
    getStageRecapAudioSequence() {
        return this.condensePollyItem(this.recapAudioSequence);
    }
    getStageVisualOptions() {
        return this.visualOptions;
    }
    setStageSpeechAudioSequence(audio) {
        this.speechAudioSequence = audio;
    }
    setStageRepromptAudioSequence(audio) {
        this.repromptAudioSequence = audio;
    }
    setStageRecapAudioSequence(audio) {
        this.recapAudioSequence = audio;
    }
    setStageVisualOptions(visuals) {
        this.visualOptions = visuals;
    }
    appendStageSpeechAudioSequence(audio) {
        this.speechAudioSequence = this.speechAudioSequence.concat(audio);
    }
    appendStageRepromptAudioSequence(audio) {
        this.repromptAudioSequence = this.repromptAudioSequence.concat(audio);
    }
    appendStageRecapAudioSequence(audio) {
        this.recapAudioSequence = this.recapAudioSequence.concat(audio);
    }
    appendStageVisuals(visuals) {
        if (!this.visualOptions) {
            this.visualOptions = [];
        }
        this.visualOptions.push(visuals);
    }
    startNewScene() {
        this.currentSceneAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRepromptAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRecapAudioQueue = {
            foreground: [],
            background: []
        };
    }
    appendSceneSpeechForeground(audioItem) {
        this.currentSceneAudioQueue.foreground = this.currentSceneAudioQueue.foreground.concat(audioItem);
    }
    appendSceneSpeechBackground(audioItem) {
        this.currentSceneAudioQueue.background = this.currentSceneAudioQueue.foreground.concat(audioItem);
    }
    appendSceneRepromptForeground(audioItem) {
        this.currentSceneRepromptAudioQueue.foreground = this.currentSceneRepromptAudioQueue.foreground.concat(audioItem);
    }
    appendSceneRepromptBackground(audioItem) {
        this.currentSceneRepromptAudioQueue.background = this.currentSceneRepromptAudioQueue.background.concat(audioItem);
    }
    appendSceneRecapForeground(audioItem) {
        this.currentSceneRecapAudioQueue.foreground = this.currentSceneRecapAudioQueue.foreground.concat(audioItem);
    }
    appendSceneRecapBackground(audioItem) {
        this.currentSceneRecapAudioQueue.background = this.currentSceneRecapAudioQueue.background.concat(audioItem);
    }
    getSpeechSceneAudio() {
        return this.currentSceneAudioQueue;
    }
    getRepromptSceneAudio() {
        return this.currentSceneRepromptAudioQueue;
    }
    getRecapSceneAudio() {
        return this.currentSceneRecapAudioQueue;
    }
    closeScene() {
        if (this.currentSceneAudioQueue.foreground.length > 0 || this.currentSceneAudioQueue.background.length > 0) {
            this.speechAudioSequence = this.speechAudioSequence.concat(this.currentSceneAudioQueue);
        }
        if (this.currentSceneRepromptAudioQueue.foreground.length > 0 || this.currentSceneRepromptAudioQueue.background.length > 0) {
            this.repromptAudioSequence = this.repromptAudioSequence.concat(this.currentSceneRepromptAudioQueue);
        }
        if (this.currentSceneRecapAudioQueue.foreground.length > 0 || this.currentSceneRecapAudioQueue.background.length > 0) {
            this.recapAudioSequence = this.recapAudioSequence.concat(this.currentSceneRecapAudioQueue);
        }
    }
    condensePollyItem(_sceneAudio) {
        let sceneAudio = JSON.parse(JSON.stringify(_sceneAudio));
        let optimizedStageSpeechSequence = [];
        // combine back-to-back polly items sharing same voice property into one.
        let tempItem = undefined;
        let buildingItem = undefined;
        let tempPushed = false;
        for (let sceneItem of sceneAudio) {
            if (sceneItem.background.length > 0) {
                if (tempItem) {
                    if (buildingItem) {
                        tempItem.foreground.push(buildingItem);
                        buildingItem = undefined;
                    }
                    tempPushed = true;
                    optimizedStageSpeechSequence.push(tempItem);
                    tempItem = undefined;
                }
                optimizedStageSpeechSequence.push(sceneItem);
                continue;
            }
            for (let foregroundItem of sceneItem.foreground) {
                if (!tempItem) {
                    tempPushed = false;
                    tempItem = {
                        foreground: [],
                        background: []
                    };
                }
                if (foregroundItem.type === interfaces_1.AlexaAudioType.POLLY) {
                    if (buildingItem) {
                        if (foregroundItem.volume == buildingItem.volume && foregroundItem.options && buildingItem.options
                            && foregroundItem.options.pitch == buildingItem.options.pitch && foregroundItem.options.rate == buildingItem.options.rate
                            && foregroundItem.options.voice == buildingItem.options.voice) {
                            buildingItem.content += ` ${foregroundItem.content}`;
                        }
                        else {
                            tempItem.foreground.push(buildingItem);
                            buildingItem = foregroundItem;
                        }
                    }
                    else {
                        buildingItem = foregroundItem;
                    }
                }
                else {
                    if (buildingItem) {
                        tempItem.foreground.push(buildingItem);
                    }
                    tempItem.foreground.push(foregroundItem);
                    buildingItem = undefined;
                }
            }
        }
        if (buildingItem && tempItem) {
            tempItem.foreground.push(buildingItem);
        }
        if (!tempPushed && tempItem) {
            optimizedStageSpeechSequence.push(tempItem);
        }
        return optimizedStageSpeechSequence;
    }
}
exports.PlayStage = PlayStage;
//# sourceMappingURL=PlayStage.js.map