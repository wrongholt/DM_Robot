import {numberToAlphabetCounting} from './../../../bakeUtilities/VoiceModelBaker';
import { strict as assert } from 'assert';

describe("auto voicemodel generating utility test", function () {
    it("Slot Number to Alphabet Conversion", async function () {
        assert.equal(numberToAlphabetCounting(0), 'a');
        assert.equal(numberToAlphabetCounting(1), 'b');
        assert.equal(numberToAlphabetCounting(2), 'c');
        assert.equal(numberToAlphabetCounting(3), 'd');
        assert.equal(numberToAlphabetCounting(4), 'e');
        assert.equal(numberToAlphabetCounting(5), 'f');
        assert.equal(numberToAlphabetCounting(6), 'g');
        assert.equal(numberToAlphabetCounting(7), 'h');
        assert.equal(numberToAlphabetCounting(8), 'i');
        assert.equal(numberToAlphabetCounting(9), 'j');
        assert.equal(numberToAlphabetCounting(10), 'k');
        assert.equal(numberToAlphabetCounting(11), 'l');
        assert.equal(numberToAlphabetCounting(12), 'm');
        assert.equal(numberToAlphabetCounting(13), 'n');
        assert.equal(numberToAlphabetCounting(14), 'o');
        assert.equal(numberToAlphabetCounting(15), 'p');
        assert.equal(numberToAlphabetCounting(16), 'q');
        assert.equal(numberToAlphabetCounting(17), 'r');
        assert.equal(numberToAlphabetCounting(18), 's');
        assert.equal(numberToAlphabetCounting(19), 't');
        assert.equal(numberToAlphabetCounting(20), 'u');
        assert.equal(numberToAlphabetCounting(21), 'v');
        assert.equal(numberToAlphabetCounting(22), 'w');
        assert.equal(numberToAlphabetCounting(23), 'x');
        assert.equal(numberToAlphabetCounting(24), 'y');
        assert.equal(numberToAlphabetCounting(25), 'z');
        assert.equal(numberToAlphabetCounting(26), 'ba');
        assert.equal(numberToAlphabetCounting(27), 'bb');
        assert.equal(numberToAlphabetCounting(100), 'dw');
    });
});