import {ContentItem} from './../importer';
import {HandlerInput} from 'ask-sdk';

// Interfaces for use by the rest of this module.
export interface ABCImportPlugin {
    parameters: any;
    
    /**
     * Unique name for the plug-in to identify the format/plug-in
     */
    readonly pluginName: string;
    
    /**
     * This method is called by the importer to convert the source story into a list of Scene objects,
     * which is used to build the imported ABCStoryMetadata
     *
     * @param inputData content of the source story.
     * @return list of Scene objects, which will be used to build the resulting metadata.
     */
    importData(contents : ContentItem[], param?: {[key: string]: any}): Promise<ImportResult>;

    /**
     * Get language version that this import plugin is optimized for.
     */
    getVersion(): number;
}

export interface ABCExporter {
    exportData(jsonInputObj : {}, exportDataCallback : any) : void;
}

export interface StoryMetadata {
    pluginName: string;
    storyTitle: string;
    storyID: string;
    scenes: Scene[];
    alexaVoiceModel?: any;
}

export interface Scene {
    readonly id: string;
    readonly contents: SceneVariation[];
    readonly customProperties?: {[key:string]: any}
}

export interface ImportResult {
    importedScenes: Scene[],
    errors?: ImportErrorLine[]
}

export interface ImportError {
    errorItems: ImportErrorLine[];
    importedData: StoryMetadata;
}

export interface ImportErrorLine {
    lineNumber: number,
    errorName: string,
    errorMessage: string,
    sourceID?: string
}

export interface SceneVariation {
    condition?: string;
    narration?: string;
    sceneDirections?: SceneDirection[];
}

export interface SceneDirection {
    readonly directionType: SceneDirectionType,
    readonly parameters: {[key: string]: any;},
    sourcePosition?: number,
    sourceScene?: string
}

export interface UserInput {
    intent?: string,
    slots?: Slot[],
    value?: string,
    handlerInput?: HandlerInput
}

export interface ResultOption {
    name: string,
    value: any
}

export interface Slot {
    name: string,
    value: string
}

export const BuiltInUserInput: {[key:string]: UserInput} = {
    "Resume Story": {
        intent: "LaunchRequest",
    },
    "Exit Story": {
        intent: "ExitRequest"
    }
}

export enum BuiltInScenes {
    ResumeScene= "Resume",
    PauseScene= "Pause",
    StartScene= "Start"
}

export interface Choice {
    id: string,
    utterances: string[],
    narration?: string,
    sceneDirections: SceneDirection[],
    saveToHistory: boolean
}

export interface ChoiceHistoryItem {
    sourceSceneID: string,
    choiceID: string,
    stateDiff: StateDiffItem[]
}

export interface StateDiffItem {
    itemName: string,
    beforeValue: any,
    afterValue: any
}

export interface AudioItem {
    type: AlexaAudioType,
    content: string,
    volume: number,
    delay: number,
    options?: {[key: string]: string;}
}

export enum AudioBlendOption {
    TRIM = 'trim',
    LONGEST = 'longest'
}

export interface SceneAudioItem {
    foreground: AudioItem[],
    background: AudioItem[]
}

export enum AlexaAudioType {
    POLLY = "polly",
    AUDIO = "audio",
    TEXT = "text"
}

export interface StorySlide {
    prompt: string,
    reprompt: string,
    recap: string,
    visual: VisualOptions
}

export interface VisualOptions {
    [key:string]: any; // Add index signature
}

export enum SceneDirectionType {
    CONDITION = "condition",
    CHOICE = "choice",
    BGM = "backgroundmusic",
    INCREASE = "increase",
    REDUCE = "reduce",
    MULTIPLY = "multiply",
    DIVIDE = "divide",
    SET = "set",
    FLAG = "flag",
    UNFLAG = "unflag",
    CLEAR = "clear",
    RECAP = "recap",
    ROLL = "roll dice",
    ADD_TO_INVENTORY = "add inventory",
    ADD_ITEM = "add item",
    REMOVE_ITEM = "remove item",
    REMOVE_FIRST = "remove first",
    REMOVE_LAST = "remove last",
    ADD_COLLECTION = "add collection",
    CUSTOM = "custom",
    REPROMPT = "reprompt",
    GET_TIME = "get time",
    VISUALS = "visuals",
    SLOT = "slot",
    BOOKMARK = "bookmark",

    GO_TO = "go to",
    SAVE_AND_GO = "save and go",

    END = "ending",
    RESTART = "restart",
    RESUME = "resume",
    RETURN = "return",
    REPEAT = "repeat",
    BACK = "back",
    PAUSE = "pause",
    REPEAT_REPROMPT = "repeat reprompt"
}