import {SceneDirection, SceneDirectionType, AudioBlendOption, VisualOptions} from './interfaces';

export class SceneDirectionBuilder {
    sceneDirections: SceneDirection[] = [];

    private nestingStack: SceneDirection[] = [];

    constructor() {
    }


    public registerChoiceDirections(utterances: string[], directions: SceneDirection[], narration?: string, saveToHistory: boolean = true) {
        let parameters: any = {
            utterances: utterances,
            saveToHistory: String(saveToHistory),
            directions: directions
        }

        if (narration) {
            parameters.narration = narration;
        }

        this.sceneDirections.push({
            directionType: SceneDirectionType.CHOICE,
            parameters: parameters
        });

        return this;
    }

    public startChoice(utterances: string[], narration?: string, saveToHistory: boolean = true) {
        let parameters: any = {
            utterances: utterances,
            saveToHistory: String(saveToHistory)
        }

        if (narration) {
            parameters.narration = narration;
        }

        let direction: SceneDirection = {
            directionType: SceneDirectionType.CHOICE,
            parameters: parameters
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);   
        }

        this.nestingStack.push(direction);

        return this;
    }

    public registerCondition(conditionString: string, directions: SceneDirection[]) {
        let parameters: any = {
            condition: conditionString,
            directions: directions
        }

        this.sceneDirections.push({
            directionType: SceneDirectionType.CONDITION,
            parameters: parameters
        });

        return this;
    }

    public startCondition(conditionString: string) {
        let parameters: any = {
            condition: conditionString,
        }

        let direction: SceneDirection = {
            directionType: SceneDirectionType.CONDITION,
            parameters: parameters
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);   
        }

        this.nestingStack.push(direction);

        return this;
    }

    public goTo(targetSceneID: string, targetSceneProperty?: string) {
        let parameters: any = {
            target: targetSceneID,
        }

        if (targetSceneProperty) {
            parameters.targetSceneProperty = targetSceneProperty;
        }

        let direction: SceneDirection = {
            directionType: SceneDirectionType.GO_TO,
            parameters: parameters
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public saveAndGoTo(targetSceneID: string, targetSceneProperty?: string) {
        let parameters: any = {
            target: targetSceneID,
        }

        if (targetSceneProperty) {
            parameters.targetSceneProperty = targetSceneProperty;
        }

        let direction: SceneDirection = {
            directionType: SceneDirectionType.SAVE_AND_GO,
            parameters: parameters
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public return() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.RETURN,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public pause() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.PAUSE,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public restart() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.RESTART,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public repeat() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REPEAT,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public repeatReprompt() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REPEAT_REPROMPT,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public goBack(backNumber: number) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.BACK,
            parameters: {
                count: backNumber
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public setReprompt(repromptSSML: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REPROMPT,
            parameters: {
                message: repromptSSML,
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);
        }

        return this;
    }

    public setBackgroundMusic(audioURL: string, delayMs?: string, volume?: string, blendOption?: AudioBlendOption) {
        let param: any = {
            audioURL: audioURL
        }

        if (delayMs) param.delayMs = delayMs;
        if (volume) param.volume = volume;
        if (blendOption) param.blend = blendOption;

        let direction: SceneDirection = {
            directionType: SceneDirectionType.BGM,
            parameters: param
        };
        
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
        }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }
    }

    public setVisuals(visualOptions : VisualOptions) {

        let params : {[key: string]: string;}= {};
        Object.keys(visualOptions).forEach(function(key) {
            params[ key ] = visualOptions[key];
        }); 

        this.sceneDirections.push({
            directionType: SceneDirectionType.VISUALS,
            parameters: params
        });
        
        return this;
    }

    public increaseVariable(variableName: string, increaseBy: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.INCREASE,
            parameters: {
                variableName: variableName,
                variableValue: increaseBy
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public multiplyVariable(variableName: string, multiplyBy: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.MULTIPLY,
            parameters: {
                variableName: variableName,
                variableValue: multiplyBy
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public divideVariable(variableName: string, divideBy: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.DIVIDE,
            parameters: {
                variableName: variableName,
                variableValue: divideBy
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public reduceVariable(variableName: string, reduceBy: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REDUCE,
            parameters: {
                variableName: variableName,
                variableValue: reduceBy
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public setVariable(variableName: string, value: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.SET,
            parameters: {
                variableName: variableName,
                variableValue: value
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }
        
        return this;
    }

    public setSlot(variableName: string, slotType: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.SLOT,
            parameters: {
                variableName: variableName,
                variableType: slotType
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }
        
        return this;
    }

    public flag(variableName: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.FLAG,
            parameters: {
                variableName: variableName
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public unflag(variableName: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.UNFLAG,
            parameters: {
                variableName: variableName
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public clearVariable(variableName: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.CLEAR,
            parameters: {
                variableName: variableName
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public setRecap(message: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.RECAP,
            parameters: {
                message: message,
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public addToInventory(variableName: string, item: string) {
        let param: any = {
            variableName: variableName,
            itemName: item,
        }

        let direction: SceneDirection = {
            directionType: SceneDirectionType.ADD_TO_INVENTORY,
            parameters: param
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public addItem(variableName: string, item: string, listSizeLimit?: number) {
        let param: any = {
            variableName: variableName,
            itemName: item,
        }

        if (listSizeLimit) {
            param.size = String(listSizeLimit);
        }

        let direction: SceneDirection = {
            directionType: SceneDirectionType.ADD_ITEM,
            parameters: param
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }
        
        return this;
    }

    public removeItem(variableName: string, item: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REMOVE_ITEM,
            parameters: {
                variableName: variableName,
                itemName: item
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public removeFirstItem(listName: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REMOVE_FIRST,
            parameters: {
                variableName: listName
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }
        
        return this;
    }
    
    public removeLastItem(listName: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.REMOVE_LAST,
            parameters: {
                variableName: listName
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public rollDice(diceString: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.ROLL,
            parameters: {
                diceString: diceString
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public markEnding() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.END,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }
        return this;
    }

    public closeChoice() {
        if (this.nestingStack.length > 0) {
            this.nestingStack.splice(this.nestingStack.length - 1, 1);
        }

        return this;
    }

    public closeCondition() {
        if (this.nestingStack.length > 0) {
            this.nestingStack.splice(this.nestingStack.length - 1, 1);
        }

        return this;
    }

    public addSceneDirection(direction: SceneDirection) {
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
        this.sceneDirections.push(JSON.parse(JSON.stringify(direction)));
        }
        return this;
    }

    public customDirection(customDirectionName: string, customParameters: {[key:string]: string} = {}) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.CUSTOM,
            parameters: Object.assign({
                customName: customDirectionName
            }, customParameters)
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public getCurrentEpochTime() {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.GET_TIME,
            parameters: {}
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }
    
    public setBookmark(bookmarkName: string, sceneName?: string) {
        let direction: SceneDirection = {
            directionType: SceneDirectionType.BOOKMARK,
            parameters: {
                variableName: bookmarkName,
                variableValue: sceneName
            }
        };

        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }

            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        } else {
            this.sceneDirections.push(direction);    
        }

        return this;
    }

    public build() {
        return this.sceneDirections;
    }
}