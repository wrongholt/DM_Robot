import { BuiltInIntent } from './constants';
import { BuiltInSlotType } from './constants';

const MAX_SLOT_SIZE : number = 140;

export interface IBuiltInIntentBuilder {
    withSampleUtterance(sampleUtterance : string) : IBuiltInIntentBuilder;
    withSampleUtterances(generateSampleUtterances : () => string[]) : IBuiltInIntentBuilder;
}

export interface IBuiltInIntentsBuilder {
    thatUsesAudioPlayerInterface() : IBuiltInIntentsBuilder;
    thatUsesDisplayInterface() : IBuiltInIntentsBuilder;
    withCancelIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withHelpIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withStopIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withPauseIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withResumeIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withMoreIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withNavigateHomeIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withNavigateSettingsIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withNextIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withPageUpIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withPageDownIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withPreviousIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withScrollRightIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withScrollDownIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withScrollLeftIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withScrollUpIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withRepeatIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withYesIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withNoIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withStartOverIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withShuffleOnIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withShuffleOffIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withLoopOnIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withLoopOffIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
    withFallbackIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder;
}

export interface IIntentBuilder {
    withIntentName(intentName : string) : IIntentBuilder;
    withSlot(slotBuilderCallback : (slotBuilder: ISlotBuilder) => void) : IIntentBuilder;
    withSampleUtterance(sampleUtterance : string) : IIntentBuilder;
    withSampleUtterances(generateSampleUtterances : () => string[]) : IIntentBuilder;
}

export interface ISlotBuilder {
    withSlotName(slotName : string) : ISlotBuilder;
    withBuiltInSlotType(builtInSlotType : BuiltInSlotType) : ISlotBuilder;
    withCustomSlotType(customSlotType : string) : ISlotBuilder;
}

export interface ICustomSlotTypeBuilder {
    withCustomSlotTypeName(customSlotTypeName : string) : ICustomSlotTypeBuilder;
    withCustomValues(generateCustomValues : () => string[]) : ICustomSlotTypeBuilder;
}

export interface ICatchAllIntentBuilder {
    withCatchAllIntentName(intentName : string) : ICatchAllIntentBuilder;
    withCatchAllSlotName(slotName : string) : ICatchAllIntentBuilder
    withCatchAllCustomSlotTypeName(slotTypeName : string) : ICatchAllIntentBuilder;
    withCatchAllCustomValues(generateCustomValues : () => string[]) : ICatchAllIntentBuilder;
    withRandomWordsAndPhrasesInCatchAllCustomValues() : ICatchAllIntentBuilder;
    withExceptionWordsInCatchAllCustomValues() : ICatchAllIntentBuilder;
    withExtraSlot(slotBuilderCallback : (slotBuilder: ISlotBuilder) => void) : ICatchAllIntentBuilder;
    withExtraSampleUtterance(sampleUtterance : string) : ICatchAllIntentBuilder;
}

export class InteractionModelBuilder {

    private invocationName? : string | undefined = undefined;
    private builtInIntentsBuilder : BuiltInIntentsBuilder = new BuiltInIntentsBuilder();
    private intentBuilders : IntentBuilder[] = [];
    private customSlotTypeBuilders : CustomSlotTypeBuilder[] = [];
    private catchAllIntentBuilder? : CatchAllIntentBuilder = undefined;

    withInvocationName(invocationName? : string | undefined) {
        this.invocationName = invocationName;
        return this;
    }

    withBuiltInIntents(builtInIntentsBuilderCallback : (builtInIntentsBuilder: IBuiltInIntentsBuilder) => void) : InteractionModelBuilder {
        builtInIntentsBuilderCallback(this.builtInIntentsBuilder);
        return this;
    }

    withIntent(intentBuilderCallback : (intentBuilder: IIntentBuilder) => void) : InteractionModelBuilder {
        let intentBuilder = new IntentBuilder();
        intentBuilderCallback(intentBuilder);
        this.intentBuilders.push(intentBuilder);
        return this;
    }

    withCustomSlotType(customSlotTypeBuilderCallback : (customSlotTypeBuilder: ICustomSlotTypeBuilder) => void) : InteractionModelBuilder {
        let customSlotTypeBuilder = new CustomSlotTypeBuilder();
        customSlotTypeBuilderCallback(customSlotTypeBuilder);
        this.customSlotTypeBuilders.push(customSlotTypeBuilder);
        return this;
    }

    withCatchAllIntent(catchAllIntentBuilderCallback : (catchAllIntentBuilder: ICatchAllIntentBuilder) => void) : InteractionModelBuilder {
        this.catchAllIntentBuilder = new CatchAllIntentBuilder();        
        catchAllIntentBuilderCallback(this.catchAllIntentBuilder);
        return this;
    }

    build() : any {
        let types : any[] = this.customSlotTypeBuilders.map(customSlotTypeBuilder => customSlotTypeBuilder.build());      
        let intents : any[] = this.builtInIntentsBuilder.build();
        let customIntents = this.intentBuilders.map(intentBuilder => intentBuilder.build());
        Array.prototype.push.apply(intents, customIntents);

        if (this.catchAllIntentBuilder) {
            intents.push(this.catchAllIntentBuilder.buildIntent());
            types.push(this.catchAllIntentBuilder.buildCustomSlotType());
        }

        let interactionModel =
        {
            languageModel: {
                types,
                intents,
                invocationName: this.invocationName
            }
        };
    
        return interactionModel;
    }
}

class BuiltInIntentBuilder implements IBuiltInIntentBuilder {

    private intentName : string;
    private sampleUtterances : string[] = [];
    private enabled : boolean = false;

    constructor(intentName: string) {
        this.intentName = intentName;
    }

    withSampleUtterance(sampleUtterance : string) : IBuiltInIntentBuilder {
        this.sampleUtterances.push(sampleUtterance);
        return this;
    }

    withSampleUtterances(generateSampleUtterances : () => string[]) : IBuiltInIntentBuilder {
        Array.prototype.push.apply(this.sampleUtterances, generateSampleUtterances());
        return this;
    }

    enable() {
        this.enabled = true;
    }

    isEnabled() : boolean {
        return this.enabled;
    }

    build() : any {
        return  {
            name: this.intentName,
            samples: this.sampleUtterances
        };
    }
}

class BuiltInIntentsBuilder implements IBuiltInIntentsBuilder {
  
    cancelIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.CANCEL_INTENT);
    helpIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.HELP_INTENT);
    stopIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.STOP_INTENT);
    pauseIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.PAUSE_INTENT);
    resumeIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.RESUME_INTENT);
    moreIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.MORE_INTENT);
    navigateHomeIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.NAVIGATE_HOME_INTENT);
    navigateSettingsIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.NAVIGATE_SETTINGS_INTENT);
    nextIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.NEXT_INTENT);
    pageUpIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.PAGE_UP_INTENT);
    pageDownIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.PAGE_DOWN_INTENT);
    previousIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.PREVIOUS_INTENT);
    scrollRightIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.SCROLL_RIGHT_INTENT);
    scrollDownIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.SCROLL_DOWN_INTENT);
    scrollLeftIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.SCROLL_LEFT_INTENT);
    scrollUpIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.SCROLL_UP_INTENT);
    repeatIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.REPEAT_INTENT);
    yesIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.YES_INTENT);
    noIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.NO_INTENT);
    startOverIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.START_OVER_INTENT);
    shuffleOnIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.SHUFFLE_ON_INTENT);
    shuffleOffIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.SHUFFLE_OFF_INTENT);
    loopOnIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.LOOP_ON_INTENT);
    loopOffIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.LOOP_OFF_INTENT);
    fallbackIntentBuilder : BuiltInIntentBuilder = new BuiltInIntentBuilder(BuiltInIntent.FALLBACK_INTENT);
    builtInIntentsBuilders : BuiltInIntentBuilder[] = [];

    constructor() {
        this.builtInIntentsBuilders.push(this.cancelIntentBuilder);
        this.builtInIntentsBuilders.push(this.helpIntentBuilder);
        this.builtInIntentsBuilders.push(this.stopIntentBuilder);
        this.builtInIntentsBuilders.push(this.pauseIntentBuilder);
        this.builtInIntentsBuilders.push(this.resumeIntentBuilder);
        this.builtInIntentsBuilders.push(this.moreIntentBuilder);
        this.builtInIntentsBuilders.push(this.navigateHomeIntentBuilder);
        this.builtInIntentsBuilders.push(this.navigateSettingsIntentBuilder);
        this.builtInIntentsBuilders.push(this.nextIntentBuilder);
        this.builtInIntentsBuilders.push(this.pageUpIntentBuilder);
        this.builtInIntentsBuilders.push(this.pageDownIntentBuilder);
        this.builtInIntentsBuilders.push(this.previousIntentBuilder);
        this.builtInIntentsBuilders.push(this.scrollRightIntentBuilder);
        this.builtInIntentsBuilders.push(this.scrollDownIntentBuilder);
        this.builtInIntentsBuilders.push(this.scrollLeftIntentBuilder);
        this.builtInIntentsBuilders.push(this.scrollUpIntentBuilder);
        this.builtInIntentsBuilders.push(this.repeatIntentBuilder);
        this.builtInIntentsBuilders.push(this.yesIntentBuilder);
        this.builtInIntentsBuilders.push(this.noIntentBuilder);
        this.builtInIntentsBuilders.push(this.startOverIntentBuilder);
        this.builtInIntentsBuilders.push(this.shuffleOnIntentBuilder);
        this.builtInIntentsBuilders.push(this.shuffleOffIntentBuilder);
        this.builtInIntentsBuilders.push(this.loopOnIntentBuilder);
        this.builtInIntentsBuilders.push(this.loopOffIntentBuilder);
        this.builtInIntentsBuilders.push(this.fallbackIntentBuilder);
    }

    thatUsesAudioPlayerInterface() : IBuiltInIntentsBuilder {
        this.pauseIntentBuilder.enable();
        this.resumeIntentBuilder.enable();
        return this;
    }

    thatUsesDisplayInterface() : IBuiltInIntentsBuilder {
        this.moreIntentBuilder.enable();
        this.navigateHomeIntentBuilder.enable();
        this.navigateSettingsIntentBuilder.enable();
        this.nextIntentBuilder.enable();
        this.pageUpIntentBuilder.enable();
        this.pageDownIntentBuilder.enable();
        this.previousIntentBuilder.enable();
        this.scrollRightIntentBuilder.enable();
        this.scrollDownIntentBuilder.enable();
        this.scrollLeftIntentBuilder.enable();
        this.scrollUpIntentBuilder.enable();
        return this;
    }

    withCancelIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.cancelIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.cancelIntentBuilder)
        }

        return this;
    }

    withHelpIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.helpIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.helpIntentBuilder)
        }

        return this;
    }

    withStopIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.stopIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.stopIntentBuilder)
        }

        return this;
    }

    withPauseIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.pauseIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.pauseIntentBuilder);
        }

        return this;
    }

    withResumeIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.resumeIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.resumeIntentBuilder);
        }

        return this;
    }

    withMoreIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.moreIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.moreIntentBuilder);
        }

        return this;
    }

    withNavigateHomeIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.navigateHomeIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.navigateHomeIntentBuilder);
        }

        return this;
    }

    withNavigateSettingsIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.navigateSettingsIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.navigateSettingsIntentBuilder);
        }

        return this;
    }

    withNextIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.nextIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.nextIntentBuilder);
        }

        return this;
    }

    withPageUpIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.pageUpIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.pageUpIntentBuilder);
        }

        return this;
    }

    withPageDownIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.pageDownIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.pageDownIntentBuilder);
        }

        return this;
    }

    withPreviousIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.previousIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.previousIntentBuilder);
        }

        return this;
    }

    withScrollRightIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.scrollRightIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.scrollRightIntentBuilder);
        }

        return this;
    }

    withScrollDownIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.scrollDownIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.scrollDownIntentBuilder);
        }

        return this;
    }

    withScrollLeftIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.scrollLeftIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.scrollLeftIntentBuilder);
        }

        return this;
    }

    withScrollUpIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.scrollUpIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.scrollUpIntentBuilder);
        }
        
        return this;
    }

    withRepeatIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.repeatIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.repeatIntentBuilder);
        }

        return this;
    }

    withYesIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.yesIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.yesIntentBuilder);
        }

        return this;
    }

    withNoIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.noIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.noIntentBuilder);
        }

        return this;
    }

    withStartOverIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.startOverIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.startOverIntentBuilder);
        }

        return this;
    }

    withShuffleOnIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.shuffleOnIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.shuffleOnIntentBuilder);
        }

        return this;
    }

    withShuffleOffIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.shuffleOffIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.shuffleOffIntentBuilder);
        }

        return this;
    }

    withLoopOnIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.loopOnIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.loopOnIntentBuilder);
        }

        return this;
    }

    withLoopOffIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.loopOffIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.loopOffIntentBuilder);
        }

        return this;
    }

    withFallbackIntent(builtInIntentBuilderCallback? : (builtInIntentBuilder: IBuiltInIntentBuilder) => void) : IBuiltInIntentsBuilder {
        this.fallbackIntentBuilder.enable();

        if (builtInIntentBuilderCallback) {
            builtInIntentBuilderCallback(this.fallbackIntentBuilder);
        }

        return this;
    }

    build() : any[] {
        let intents : any[] = [];

        this.builtInIntentsBuilders.forEach(builtInIntentsBuilder => {
            if (builtInIntentsBuilder.isEnabled()) {
                intents.push(builtInIntentsBuilder.build())
            }            
        });

        return intents;
    }
}

class IntentBuilder implements IIntentBuilder {

    private intentName? : string = 'CatchAllIntent';
    private slotBuilders : SlotBuilder[] = [];
    private sampleUtterances : string[] = [];

    withIntentName(intentName : string) : IIntentBuilder {
        this.intentName = intentName;
        return this;
    }

    withSlot(slotBuilderCallback : (slotBuilder: ISlotBuilder) => void) : IIntentBuilder {
        let slotBuilder = new SlotBuilder();
        slotBuilderCallback(slotBuilder);
        this.slotBuilders.push(slotBuilder);
        return this;
    }

    withSampleUtterance(sampleUtterance : string) : IIntentBuilder {
        this.sampleUtterances.push(sampleUtterance);
        return this;
    }

    withSampleUtterances(generateSampleUtterances : () => string[]) : IIntentBuilder {
        Array.prototype.push.apply(this.sampleUtterances, generateSampleUtterances());
        return this;
    }

    build() : any {
        if (!this.intentName) {
            throw new Error('IntentName was not defined for intent');
        }

        let slots = this.slotBuilders.map(slotBuilder => slotBuilder.build());

        return  {
            name: this.intentName,
            samples: this.sampleUtterances,
            slots
        };
    }
}

class SlotBuilder implements ISlotBuilder {

    private slotName? : string = undefined;
    private builtInSlotType? : BuiltInSlotType = undefined;
    private customSlotType? : string = undefined;

    withSlotName(slotName : string) : ISlotBuilder {
        this.slotName = slotName;
        return this;
    }

    withBuiltInSlotType(builtInSlotType : BuiltInSlotType) : ISlotBuilder {
        this.builtInSlotType = builtInSlotType;
        return this;
    }

    withCustomSlotType(customSlotType : string) : ISlotBuilder {
        this.customSlotType = customSlotType;
        return this;
    }

    getSlotName() : string | undefined {        
        return this.slotName;
    }

    build() : any {
        if (!this.slotName) {
            throw new Error('SlotName is not defined for slot');
        }

        let type : string;

        if (this.builtInSlotType) {
            type = this.builtInSlotType;
        } else if (this.customSlotType) {
            type = this.customSlotType;
        } else {
            throw new Error('BuiltInSlotType or CustomSlotType are not defined for slot');
        }

        return {
            name: this.slotName,
            type
        }
    }
}

class CustomSlotTypeBuilder implements ICustomSlotTypeBuilder {

    private customSlotTypeName? : string = undefined;
    private customValues : string[] = [];

    withCustomSlotTypeName(customSlotTypeName : string) : ICustomSlotTypeBuilder {
        this.customSlotTypeName = customSlotTypeName;
        return this;
    }

    withCustomValues(generateCustomValues : () => string[]) : ICustomSlotTypeBuilder {
        Array.prototype.push.apply(this.customValues, generateCustomValues());
        return this;
    }

    build() : any {
        if (!this.customSlotTypeName) {
            throw new Error('CustomSlotTypeName is not defined for custom slot type');
        }
        
        if (this.customValues.length <= 0) {
            throw new Error('No custom values defined for custom slot type');
        }

        return {
            name: this.customSlotTypeName,
            values: this.buildSlotTypeValues()
        };
    }

    private buildSlotTypeValues() : any[] {
        let existingSlotTypeValues : any = {};
        let slotTypeValues : any[] = [];
    
        this.customValues.forEach(value => {
            if (value) {
                let trimmedValue = value.trim().substr(0, MAX_SLOT_SIZE);

                if (trimmedValue) {
                    let trimmedLowerCaseValue = trimmedValue.toLowerCase();
        
                    if (!existingSlotTypeValues[trimmedLowerCaseValue]) {
                        let slotItem = this.buildSlotItem(trimmedValue);
        
                        slotTypeValues.push(slotItem);
                        existingSlotTypeValues[trimmedLowerCaseValue] = true;
                    }
                }
            }
        });
    
        return slotTypeValues;
    }
    
    private buildSlotItem(value : string) : any {
        let slotItem : Object = 		
        {
            id: null,
            name: {
                value: value,
                synonyms: []
            }
        };
    
        return slotItem;
    }
}

class CatchAllIntentBuilder implements ICatchAllIntentBuilder {

    private catchAllIntentName? : string = undefined;
    private catchAllSlotBuilder : SlotBuilder = new SlotBuilder();
    private catchAllCustomSlotTypeBuilder : CustomSlotTypeBuilder = new CustomSlotTypeBuilder();
    private slotBuilders : SlotBuilder[] = [];
    private sampleUtterances : string[] = [];

    constructor() {
        this.catchAllSlotBuilder.withSlotName('CatchAll').withCustomSlotType('CatchAllSlotType');
        this.catchAllCustomSlotTypeBuilder.withCustomSlotTypeName('CatchAllSlotType');
    }

    withCatchAllIntentName(intentName : string) : ICatchAllIntentBuilder {
        this.catchAllIntentName = intentName;
        return this;
    }

    withCatchAllSlotName(slotName : string) : ICatchAllIntentBuilder {
        this.catchAllSlotBuilder.withSlotName(slotName);
        return this;
    }

    withCatchAllCustomSlotTypeName(slotTypeName : string) : ICatchAllIntentBuilder {
        this.catchAllSlotBuilder.withCustomSlotType(slotTypeName);
        this.catchAllCustomSlotTypeBuilder.withCustomSlotTypeName(slotTypeName);
        return this;
    }

    withCatchAllCustomValues(generateCustomValues : () => string[]) : ICatchAllIntentBuilder {
        this.catchAllCustomSlotTypeBuilder.withCustomValues(generateCustomValues);
        return this;
    }

    withRandomWordsAndPhrasesInCatchAllCustomValues() : ICatchAllIntentBuilder {
        this.catchAllCustomSlotTypeBuilder.withCustomValues(generateRandomWordsAndPhrases);
        return this;
    }

    withExceptionWordsInCatchAllCustomValues() : ICatchAllIntentBuilder {
        this.catchAllCustomSlotTypeBuilder.withCustomValues(generateExceptionWords);
        return this;
    }

    withExtraSlot(slotBuilderCallback : (slotBuilder: ISlotBuilder) => void) : ICatchAllIntentBuilder {
        let slotBuilder = new SlotBuilder();
        slotBuilderCallback(slotBuilder);
        this.slotBuilders.push(slotBuilder);
        return this;
    }

    withExtraSampleUtterance(sampleUtterance : string) : ICatchAllIntentBuilder {
        this.sampleUtterances.push(sampleUtterance);
        return this;
    }

    buildIntent() : any {
        if (!this.catchAllIntentName) {
            throw new Error('CatchAllIntentName was not defined for catch all intent');
        }

        let samples = [ '{' + this.catchAllSlotBuilder.getSlotName() + '}' ];
        Array.prototype.push.apply(samples, this.sampleUtterances);

        let slots = this.slotBuilders.map(slotBuilder => slotBuilder.build());
        slots.push(this.catchAllSlotBuilder.build());

        return  {
            name: this.catchAllIntentName,
            samples,
            slots
        };
    }

    buildCustomSlotType() : any {
        return this.catchAllCustomSlotTypeBuilder.build();
    }
}
    
function generateExceptionWords() : string[] {
    let exceptionWords = [
        'Soap',
        'Sop',
        'Sap',
        'Four',
        'Pap',
        'Pop',
        'top',
        'none'
    ];

    return exceptionWords;
}
    
function generateRandomWordsAndPhrases() : string[] {
    // Generated by https://randomwordgenerator.com/phrase.php
    let randomPhrases : string[] = [
        'What Am I, Chopped Liver?',
        'Back to Square One',
        'Shot In the Dark',
        'What Goes Up Must Come Down',
        'Keep Your Eyes Peeled',
        'In a Pickle',
        'Hit Below The Belt',
        'Elvis Has Left The Building',
        'On the Ropes',
        'Eat My Hat',
        'Keep Your Shirt On',
        'Keep On Truckin\'',
        'My Cup of Tea',
        'Talk the Talk',
        'Mountain Out of a Molehill',
        'Fight Fire With Fire',
        'Jaws of Life',
        'Beating Around the Bush',
        'Scot-free',
        'Down And Out',
        'Every Cloud Has a Silver Lining',
        'Tough It Out',
        'Money Doesn\'t Grow On Trees',
        'Under the Weather',
        'No Ifs, Ands, or Buts',
        'Greased Lightning',
        'You Can\'t Judge a Book By Its Cover',
        'Ride Him, Cowboy!',
        'Down To The Wire',
        'Read \'Em and Weep',
        'Know the Ropes',
        'Ring Any Bells?',
        'Back To the Drawing Board',
        'Between a Rock and a Hard Place',
        'Short End of the Stick',
        'Playing For Keeps',
        'On Cloud Nine',
        'Easy As Pie',
        'Beating a Dead Horse',
        'Lickety Split',
        'Poke Fun At',
        'Like Father Like Son',
        'Two Down, One to Go',
        'Break The Ice',
        'Swinging For the Fences',
        'Cup Of Joe',
        'Drawing a Blank',
        'Hard Pill to Swallow',
        'Quality Time',
        'There\'s No I in Team',
        'The Plot Thickens',
        'Yada Yada',
        'Quick and Dirty',
        'All Greek To Me',
        'A Chip on Your Shoulder',
        'Barking Up The Wrong Tree',
        'I Smell a Rat',
        'Off One\'s Base',
        'Jumping the Gun',
        'Raining Cats and Dogs',
        'Jaws of Death',
        'Son of a Gun',
        'Down For The Count',
        'Wild Goose Chase',
        'Head Over Heels',
        'Roll With the Punches',
        'Knock Your Socks Off',
        'Down To Earth',
        'Heads Up',
        'Jack of All Trades Master of None',
        'If You Can\'t Stand the Heat, Get Out of the Kitchen',
        'Curiosity Killed The Cat',
        'No-Brainer',
        'Go Out On a Limb',
        'Jig Is Up',
        'In the Red',
        'Happy as a Clam',
        'Cut The Mustard',
        'A Piece of Cake',
        'Not the Sharpest Tool in the Shed',
        'Hear, Hear',
        'Let Her Rip',
        'Cry Over Spilt Milk',
        'Close But No Cigar',
        'Throw In the Towel',
        'Cut To The Chase',
        'Up In Arms',
        'High And Dry',
        'Love Birds',
        'Drive Me Nuts',
        'Needle In a Haystack',
        'Par For the Course',
        'A Dime a Dozen',
        'Top Drawer',
        'Birds of a Feather Flock Together',
        'It\'s Not All It\'s Cracked Up To Be',
        'Ugly Duckling',
        'Playing Possum',
        'Don\'t Count Your Chickens Before They Hatch',
        'An Arm and a Leg',
        'Hands Down',
        'Right Off the Bat',
        'Don\'t Look a Gift Horse In The Mouth',
        'A Fool and His Money are Soon Parted',
        'Give a Man a Fish',
        'Fish Out Of Water',
        'Under Your Nose',
        'Right Out of the Gate',
        'Wouldn\'t Harm a Fly',
        'On the Same Page',
        'Lovey Dovey',
        'Man of Few Words',
        'Quick On the Draw',
        'Elephant in the Room',
        'Fool\'s Gold',
        'Goody Two-Shoes',
        'Everything But The Kitchen Sink',
        'You Can\'t Teach an Old Dog New Tricks',
        'Burst Your Bubble',
        'Rain on Your Parade',
        'Wake Up Call',
        'Dropping Like Flies',
        'When the Rubber Hits the Road',
        'Flea Market',
        'Foaming At The Mouth',
        'Cry Wolf',
        'Tug of War',
        'It\'s Not Brain Surgery',
        'Long In The Tooth',
        'Mouth-watering',
        'Go For Broke',
        'Knuckle Down',
        'Fit as a Fiddle',
        'Put a Sock In It'
    ];
    // Generated by https://randomwordgenerator.com
    let randomWords : string[] = [
        'nominate',
        'name',
        'explain',
        'radio',
        'clash',
        'cool',
        'nail',
        'hallway',
        'horoscope',
        'approval',
        'feedback',
        'reverse',
        'specimen',
        'candle',
        'category',
        'cheque',
        'scratch',
        'virtue',
        'relate',
        'identity',
        'jail',
        'conflict',
        'conscience',
        'rider',
        'difficulty',
        'version',
        'far',
        'sunrise',
        'voyage',
        'drain',
        'precede',
        'widen',
        'ash',
        'example',
        'haunt',
        'cabinet',
        'warning',
        'opponent',
        'retirement',
        'relax',
        'corner',
        'neighbour',
        'error',
        'customer',
        'deprivation',
        'module',
        'afford',
        'instrument',
        'musical',
        'dead',
        'trend',
        'stream',
        'discriminate',
        'vessel',
        'moon',
        'anger',
        'quotation',
        'chew',
        'seasonal',
        'thinker',
        'quantity',
        'finger',
        'lean',
        'open',
        'registration',
        'reliable',
        'gold',
        'ambiguity',
        'project',
        'request',
        'assumption',
        'remunerate',
        'ambiguous',
        'consultation',
        'neighborhood',
        'stable',
        'coverage',
        'testify',
        'anniversary',
        'ballet',
        'drag',
        'bacon',
        'sequence',
        'perform',
        'block',
        'folk music',
        'patent',
        'definite',
        'cave',
        'begin',
        'defeat',
        'crystal',
        'damn',
        'thank',
        'decide',
        'reason',
        'telephone',
        'injury',
        'brag',
        'manufacturer',
        'digital',
        'lay',
        'period',
        'use',
        'negative',
        'leash',
        'random',
        'salad',
        'implicit',
        'compose',
        'episode',
        'split',
        'wolf',
        'acceptable',
        'cellar',
        'list',
        'estate',
        'cafe',
        'stool',
        'agenda',
        'adventure',
        'commission',
        'room',
        'girlfriend',
        'produce',
        'profession',
        'motivation',
        'home',
        'revenge',
        'easy',
        'absolute',
        'bet',
        'book',
        'contain',
        'preach',
        'green',
        'wire',
        'decrease',
        'imposter',
        'calendar',
        'jump',
        'share',
        'hemisphere',
        'deputy',
        'level',
        'capture',
        'continental',
        'owl',
        'accompany',
        'castle',
        'railroad',
        'disco',
        'monstrous',
        'spontaneous',
        'live',
        'orbit',
        'gasp',
        'science',
        'punch',
        'implication',
        'despair',
        'button',
        'location',
        'terms',
        'width',
        'fever',
        'ranch',
        'dorm',
        'performance',
        'yearn',
        'faith',
        'endure',
        'wave',
        'refund',
        'nightmare',
        'impress',
        'closed',
        'courtesy',
        'elapse',
        'legislature',
        'meadow',
        'strange',
        'finish',
        'mountain',
        'sit',
        'forest',
        'technique',
        'lip',
        'inch',
        'belong',
        'concentrate',
        'entertainment',
        'carry',
        'retiree',
        'camp',
        'scrape',
        'connection',
        'mine',
        'king'
    ];

    let randomInputs : string[] = [];
    Array.prototype.push.apply(randomInputs, randomPhrases);
    Array.prototype.push.apply(randomInputs, randomWords);

    return randomInputs;
}

let unitTests = false;

if (unitTests) {
    let interactionModelBuilder = new InteractionModelBuilder();
    let interactionModel = interactionModelBuilder
        .withInvocationName('memory wizard test')
        .withBuiltInIntents(x => x
            .withHelpIntent(x => x
                .withSampleUtterance('Help Me'))
            .thatUsesDisplayInterface()
            .withNextIntent(x => x
                    .withSampleUtterance('Skip')))
        .withCustomSlotType(x => x
            .withCustomSlotTypeName('CustomSlotType')
            .withCustomValues(() => [ 'custom value', 'custom value 2' ]))
        .withIntent(x => x.withIntentName('ProceedIntent').withSampleUtterance('Proceed'))
        .withIntent(x => x.withIntentName('RepeatIntent').withSampleUtterance('Repeat'))
        .withIntent(x => x.
            withIntentName('GiveAgeIntent')
            .withSampleUtterance('My name is {Age}')
            .withSlot(x => x
                .withSlotName('Age')
                .withBuiltInSlotType(BuiltInSlotType.NUMBER)))
        .withCatchAllIntent(x => x
            .withCatchAllIntentName('AnswerIntent')
            .withCatchAllSlotName('Answer')
            .withCatchAllCustomSlotTypeName('AnswerSlotType')
            .withCatchAllCustomValues(() => [ 'Yes, Okay' ])
            .withRandomWordsAndPhrasesInCatchAllCustomValues()
            .withExceptionWordsInCatchAllCustomValues())
        .build();
            
    console.log(JSON.stringify(interactionModel));
}
