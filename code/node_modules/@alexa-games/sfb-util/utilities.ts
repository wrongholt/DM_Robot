// Alexa-Util Module. Useful Alexa functions for any Alexa Games skill. Put those things in here please if they don't fit in any other module.

import { pickFuzzyResponse } from './fuzzy-responses';

let Fuse = require('fuse.js');

export const YesFuzzyValues = [
    "yes",
    "yea",
    "yeah",
    "yeh",
    "yah",
    "yep",
    "yup",
    "aye",
    "ok",
    "okay",
    "correct",
    "true",
    "sure",
    "fine",
    "absolutely",
    "definitely",
    "affirmative",
    "of course",
    "certainly",
    "very well",
    "indeed",
    "surely",
    "right",
    "roger",
    "it sure is",
    "yes please",
    "yes, please",
    "heck yeah",
    "sure thing",
    "yes indeed",
    "you bet",
    "go ahead",
    "why not"
];

export const NoFuzzyValues = [
    "no",
    "nope",
    "na",
    "nah",
    "not correct",
    "incorrect",
    "false",
    "negative",
    "no thankyou",
    "no, thankyou",
    "no, i'm good",
    "no i'm good"
];

export const YesNoIntent = {
    NO: 1,
    YES: 2,
    UNDEFINED: 3
}

function getYesIntentValue(value: string) {
    let yesFuzzyValue = pickFuzzyResponse(value, YesFuzzyValues);
    return yesFuzzyValue;
}

function getNoIntentValue(value: string) {
    let noFuzzyValue = pickFuzzyResponse(value, NoFuzzyValues);
    return noFuzzyValue;
}

// Returns an object that tells whether the given answer (string) is in the list of strings. If a list of items, 
// please give the key that will return the string in the item you want to match against.
export function isBestMatchInList(
    givenAnswer: string, itemList: any, keyNameIfItemListNotAStrList: any, options: any) {

    let minMatchLength = 1;

    if(options && options.shortestWordMinMatchLength && givenAnswer) {
        // Start off as a really big value
        minMatchLength = 100;
    }

	let answerList = [];
	for(let i = 0; i < itemList.length; i++) {

		let strToMatch;
		if(!keyNameIfItemListNotAStrList) {
			strToMatch = itemList[i];
		} else {
			strToMatch = itemList[i][keyNameIfItemListNotAStrList];
		}

		// Remove question marks from string, because Alexa won't match those
		strToMatch = strToMatch.replace(/\?/ig, "");

        answerList.push({answer: strToMatch, index: i});

        // Do shortest word calculation here by looking at all possible answer sub words to find the shortest
        if(options && options.shortestWordMinMatchLength) {

            // Now match down to the shortest possible choice word that there is
            if(strToMatch && strToMatch.length > 0) {
                let subAnswerWords = strToMatch.split(" ");
                const MIN_POSSIBLE_LENGTH = 3; // Start off at 3 characters
    
                for(let word of subAnswerWords) {
                    let wordLength = word.length;
                    if(wordLength >= MIN_POSSIBLE_LENGTH && wordLength < minMatchLength) {
                        minMatchLength = wordLength;
                    }
                }
            }
        }
	}

	let fuseOptions = {
	  shouldSort: true,
	  includeScore: true,
	  threshold: 1.0,
	  location: 0,
	  distance: 1000,
	  maxPatternLength: 300,
      minMatchCharLength: minMatchLength,
	  keys: [
		"answer"
	  ]
    };
    
	let fuse = new Fuse(answerList, fuseOptions);

	let fuseResult = fuse.search(givenAnswer);

	console.log(fuseResult);
	
	let isInList = false;
	
	let CORRECT_SCORE_THRESHOLD = 0.3;

	let matchedIndex = -1;
	let matchedName = "";
	let matchedItem = undefined;

	if(fuseResult.length > 0) {
		console.log("Fuse Result");
		console.log(fuseResult[0]);

		let score = fuseResult[0].score;
		
		if(score <= CORRECT_SCORE_THRESHOLD) {
			isInList = true;
			
			matchedIndex = fuseResult[0].item.index;
			matchedName = fuseResult[0].item.answer;
			matchedItem = itemList[matchedIndex];
		}				
    }
    
	return { isInList: isInList, matchedName: matchedName, matchedIndex: matchedIndex, matchedItem: matchedItem};
}

export function reverseString(str: string) {
    // Step 1. Use the split() method to return a new array
    let splitString = str.split(""); // let splitString = "hello".split("");
    // ["h", "e", "l", "l", "o"]
 
    // Step 2. Use the reverse() method to reverse the new created array
    let reverseArray = splitString.reverse(); // let reverseArray = ["h", "e", "l", "l", "o"].reverse();
    // ["o", "l", "l", "e", "h"]
 
    // Step 3. Use the join() method to join all elements of the array into a string
    let joinArray = reverseArray.join(""); // let joinArray = ["o", "l", "l", "e", "h"].join("");
    // "olleh"
    
    //Step 4. Return the reversed string
    return joinArray; // "olleh"
}

export function chooseRandomElement(arr: any[]) {
	return arr[Math.floor(Math.random() * arr.length)];
}

// Wrap the index and item together in the response
export function chooseRandomElementWithIndex(arr: any[]) {
	let index = Math.floor(Math.random() * arr.length); 
	return { item: arr[index],
		     index: index };
}

export function capitalizeFirstLetter(str: string) {

    if(!str || str.length < 1) {
        return str;
    }

    return str.charAt(0).toUpperCase() + str.slice(1);
}

export function escapeRegExp(str: string) {
	return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

export function escapeStringForSSML(str: string) {
	if(!str) {
		return "";
	}

	// Escape special characters not allowed in SSML
	return str.replace(/&/g, "&amp;");
}

export function wrapAudioTag(url: string) {
    return "<audio src='" + url + "' />";
}

export function arrayNotEmpty(arr: any[]) {
	return arr && arr.length > 0;
}

// deprecated: use getYesNoIntentFromIntentSlot
export function getYesNoIntentFromAnswerIntent(handlerContext: any) {
    if (handlerContext.event.request &&
        handlerContext.event.request.intent &&
        handlerContext.event.request.intent.slots &&
        handlerContext.event.request.intent.slots.AnswerIntentSlot &&
        handlerContext.event.request.intent.slots.AnswerIntentSlot.value) {
        
        if (getNoIntentValue(handlerContext.event.request.intent.slots.AnswerIntentSlot.value)) {
            return YesNoIntent.NO;
        } else if (getYesIntentValue(handlerContext.event.request.intent.slots.AnswerIntentSlot.value)) {
            return YesNoIntent.YES;
        }
    }

    return YesNoIntent.UNDEFINED;
}

export function getYesNoIntentFromIntentSlot(handlerContext: any, intentSlot: any) {
    if (handlerContext.event.request &&
        handlerContext.event.request.intent &&
        handlerContext.event.request.intent.slots &&
        handlerContext.event.request.intent.slots[intentSlot] &&
        handlerContext.event.request.intent.slots[intentSlot].value) {
        
        if (getNoIntentValue(handlerContext.event.request.intent.slots[intentSlot].value)) {
            return YesNoIntent.NO;
        } else if (getYesIntentValue(handlerContext.event.request.intent.slots[intentSlot].value)) {
            return YesNoIntent.YES;
        }
    }

    return YesNoIntent.UNDEFINED;
}

// Does the given slot contain a value
export function doesSlotContainValue(handlerContext: any, intentSlot: any) {
    if (handlerContext.event.request &&
        handlerContext.event.request.intent &&
        handlerContext.event.request.intent.slots &&
        handlerContext.event.request.intent.slots[intentSlot] &&
        handlerContext.event.request.intent.slots[intentSlot].value) {        
            return true;
    }

    return false;
}

let runUnitTests = false;
if(runUnitTests) {
	let listOfStrings = ['hidden items', 'dont exist', 'in this list'];
	
	// Not in the list
	let matchingResult = exports.isBestMatchInList("Whatever!!!", listOfStrings);
	console.log(matchingResult);

	// Should best match to the list
	matchingResult = exports.isBestMatchInList("is in this list", listOfStrings);
	console.log(matchingResult);
	
	let radarString = "RaDar";
	let reverseStr = exports.reverseString("RaDar");
	console.log(radarString + " <-%-> " + reverseStr);
}

export function getCurrentTimestamp() {
	return Math.floor(new Date().getTime() / 1000);
}

export function getCurrentTimestampMS() {
	return Math.floor(new Date().getTime());
}

export function getMSSinceTimestamp(timestamp: number) {
	return Math.floor(new Date().getTime()) - timestamp;
}

export function getSecondsSinceTimestamp(timestamp: number) {
	return Math.floor(new Date().getTime() / 1000) - timestamp;
}

// Check if a string is a number
export function isNumeric(num: any){
    return !isNaN(num);
}

export function getSessionUserId(event: any) {
    let userId = '';

    // Long-form audio enabled skills use event.context
    if (event.context) {
        userId = event.context.System.user.userId;
    } else if (event.session) {
        userId = event.session.user.userId;
    }

    return userId;
}