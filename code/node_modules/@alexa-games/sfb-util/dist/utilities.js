"use strict";
// Alexa-Util Module. Useful Alexa functions for any Alexa Games skill. Put those things in here please if they don't fit in any other module.
Object.defineProperty(exports, "__esModule", { value: true });
const fuzzy_responses_1 = require("./fuzzy-responses");
let Fuse = require('fuse.js');
exports.YesFuzzyValues = [
    "yes",
    "yea",
    "yeah",
    "yeh",
    "yah",
    "yep",
    "yup",
    "aye",
    "ok",
    "okay",
    "correct",
    "true",
    "sure",
    "fine",
    "absolutely",
    "definitely",
    "affirmative",
    "of course",
    "certainly",
    "very well",
    "indeed",
    "surely",
    "right",
    "roger",
    "it sure is",
    "yes please",
    "yes, please",
    "heck yeah",
    "sure thing",
    "yes indeed",
    "you bet",
    "go ahead",
    "why not"
];
exports.NoFuzzyValues = [
    "no",
    "nope",
    "na",
    "nah",
    "not correct",
    "incorrect",
    "false",
    "negative",
    "no thankyou",
    "no, thankyou",
    "no, i'm good",
    "no i'm good"
];
exports.YesNoIntent = {
    NO: 1,
    YES: 2,
    UNDEFINED: 3
};
function getYesIntentValue(value) {
    let yesFuzzyValue = fuzzy_responses_1.pickFuzzyResponse(value, exports.YesFuzzyValues);
    return yesFuzzyValue;
}
function getNoIntentValue(value) {
    let noFuzzyValue = fuzzy_responses_1.pickFuzzyResponse(value, exports.NoFuzzyValues);
    return noFuzzyValue;
}
// Returns an object that tells whether the given answer (string) is in the list of strings. If a list of items, 
// please give the key that will return the string in the item you want to match against.
function isBestMatchInList(givenAnswer, itemList, keyNameIfItemListNotAStrList, options) {
    let minMatchLength = 1;
    if (options && options.shortestWordMinMatchLength && givenAnswer) {
        // Start off as a really big value
        minMatchLength = 100;
    }
    let answerList = [];
    for (let i = 0; i < itemList.length; i++) {
        let strToMatch;
        if (!keyNameIfItemListNotAStrList) {
            strToMatch = itemList[i];
        }
        else {
            strToMatch = itemList[i][keyNameIfItemListNotAStrList];
        }
        // Remove question marks from string, because Alexa won't match those
        strToMatch = strToMatch.replace(/\?/ig, "");
        answerList.push({ answer: strToMatch, index: i });
        // Do shortest word calculation here by looking at all possible answer sub words to find the shortest
        if (options && options.shortestWordMinMatchLength) {
            // Now match down to the shortest possible choice word that there is
            if (strToMatch && strToMatch.length > 0) {
                let subAnswerWords = strToMatch.split(" ");
                const MIN_POSSIBLE_LENGTH = 3; // Start off at 3 characters
                for (let word of subAnswerWords) {
                    let wordLength = word.length;
                    if (wordLength >= MIN_POSSIBLE_LENGTH && wordLength < minMatchLength) {
                        minMatchLength = wordLength;
                    }
                }
            }
        }
    }
    let fuseOptions = {
        shouldSort: true,
        includeScore: true,
        threshold: 1.0,
        location: 0,
        distance: 1000,
        maxPatternLength: 300,
        minMatchCharLength: minMatchLength,
        keys: [
            "answer"
        ]
    };
    let fuse = new Fuse(answerList, fuseOptions);
    let fuseResult = fuse.search(givenAnswer);
    console.log(fuseResult);
    let isInList = false;
    let CORRECT_SCORE_THRESHOLD = 0.3;
    let matchedIndex = -1;
    let matchedName = "";
    let matchedItem = undefined;
    if (fuseResult.length > 0) {
        console.log("Fuse Result");
        console.log(fuseResult[0]);
        let score = fuseResult[0].score;
        if (score <= CORRECT_SCORE_THRESHOLD) {
            isInList = true;
            matchedIndex = fuseResult[0].item.index;
            matchedName = fuseResult[0].item.answer;
            matchedItem = itemList[matchedIndex];
        }
    }
    return { isInList: isInList, matchedName: matchedName, matchedIndex: matchedIndex, matchedItem: matchedItem };
}
exports.isBestMatchInList = isBestMatchInList;
function reverseString(str) {
    // Step 1. Use the split() method to return a new array
    let splitString = str.split(""); // let splitString = "hello".split("");
    // ["h", "e", "l", "l", "o"]
    // Step 2. Use the reverse() method to reverse the new created array
    let reverseArray = splitString.reverse(); // let reverseArray = ["h", "e", "l", "l", "o"].reverse();
    // ["o", "l", "l", "e", "h"]
    // Step 3. Use the join() method to join all elements of the array into a string
    let joinArray = reverseArray.join(""); // let joinArray = ["o", "l", "l", "e", "h"].join("");
    // "olleh"
    //Step 4. Return the reversed string
    return joinArray; // "olleh"
}
exports.reverseString = reverseString;
function chooseRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
exports.chooseRandomElement = chooseRandomElement;
// Wrap the index and item together in the response
function chooseRandomElementWithIndex(arr) {
    let index = Math.floor(Math.random() * arr.length);
    return { item: arr[index],
        index: index };
}
exports.chooseRandomElementWithIndex = chooseRandomElementWithIndex;
function capitalizeFirstLetter(str) {
    if (!str || str.length < 1) {
        return str;
    }
    return str.charAt(0).toUpperCase() + str.slice(1);
}
exports.capitalizeFirstLetter = capitalizeFirstLetter;
function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
exports.escapeRegExp = escapeRegExp;
function escapeStringForSSML(str) {
    if (!str) {
        return "";
    }
    // Escape special characters not allowed in SSML
    return str.replace(/&/g, "&amp;");
}
exports.escapeStringForSSML = escapeStringForSSML;
function wrapAudioTag(url) {
    return "<audio src='" + url + "' />";
}
exports.wrapAudioTag = wrapAudioTag;
function arrayNotEmpty(arr) {
    return arr && arr.length > 0;
}
exports.arrayNotEmpty = arrayNotEmpty;
// deprecated: use getYesNoIntentFromIntentSlot
function getYesNoIntentFromAnswerIntent(handlerContext) {
    if (handlerContext.event.request &&
        handlerContext.event.request.intent &&
        handlerContext.event.request.intent.slots &&
        handlerContext.event.request.intent.slots.AnswerIntentSlot &&
        handlerContext.event.request.intent.slots.AnswerIntentSlot.value) {
        if (getNoIntentValue(handlerContext.event.request.intent.slots.AnswerIntentSlot.value)) {
            return exports.YesNoIntent.NO;
        }
        else if (getYesIntentValue(handlerContext.event.request.intent.slots.AnswerIntentSlot.value)) {
            return exports.YesNoIntent.YES;
        }
    }
    return exports.YesNoIntent.UNDEFINED;
}
exports.getYesNoIntentFromAnswerIntent = getYesNoIntentFromAnswerIntent;
function getYesNoIntentFromIntentSlot(handlerContext, intentSlot) {
    if (handlerContext.event.request &&
        handlerContext.event.request.intent &&
        handlerContext.event.request.intent.slots &&
        handlerContext.event.request.intent.slots[intentSlot] &&
        handlerContext.event.request.intent.slots[intentSlot].value) {
        if (getNoIntentValue(handlerContext.event.request.intent.slots[intentSlot].value)) {
            return exports.YesNoIntent.NO;
        }
        else if (getYesIntentValue(handlerContext.event.request.intent.slots[intentSlot].value)) {
            return exports.YesNoIntent.YES;
        }
    }
    return exports.YesNoIntent.UNDEFINED;
}
exports.getYesNoIntentFromIntentSlot = getYesNoIntentFromIntentSlot;
// Does the given slot contain a value
function doesSlotContainValue(handlerContext, intentSlot) {
    if (handlerContext.event.request &&
        handlerContext.event.request.intent &&
        handlerContext.event.request.intent.slots &&
        handlerContext.event.request.intent.slots[intentSlot] &&
        handlerContext.event.request.intent.slots[intentSlot].value) {
        return true;
    }
    return false;
}
exports.doesSlotContainValue = doesSlotContainValue;
let runUnitTests = false;
if (runUnitTests) {
    let listOfStrings = ['hidden items', 'dont exist', 'in this list'];
    // Not in the list
    let matchingResult = exports.isBestMatchInList("Whatever!!!", listOfStrings);
    console.log(matchingResult);
    // Should best match to the list
    matchingResult = exports.isBestMatchInList("is in this list", listOfStrings);
    console.log(matchingResult);
    let radarString = "RaDar";
    let reverseStr = exports.reverseString("RaDar");
    console.log(radarString + " <-%-> " + reverseStr);
}
function getCurrentTimestamp() {
    return Math.floor(new Date().getTime() / 1000);
}
exports.getCurrentTimestamp = getCurrentTimestamp;
function getCurrentTimestampMS() {
    return Math.floor(new Date().getTime());
}
exports.getCurrentTimestampMS = getCurrentTimestampMS;
function getMSSinceTimestamp(timestamp) {
    return Math.floor(new Date().getTime()) - timestamp;
}
exports.getMSSinceTimestamp = getMSSinceTimestamp;
function getSecondsSinceTimestamp(timestamp) {
    return Math.floor(new Date().getTime() / 1000) - timestamp;
}
exports.getSecondsSinceTimestamp = getSecondsSinceTimestamp;
// Check if a string is a number
function isNumeric(num) {
    return !isNaN(num);
}
exports.isNumeric = isNumeric;
function getSessionUserId(event) {
    let userId = '';
    // Long-form audio enabled skills use event.context
    if (event.context) {
        userId = event.context.System.user.userId;
    }
    else if (event.session) {
        userId = event.session.user.userId;
    }
    return userId;
}
exports.getSessionUserId = getSessionUserId;
//# sourceMappingURL=utilities.js.map