{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../utilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Alexa-Util Module. Useful Alexa functions for any Alexa Games skill. Put those things in here please if they don't fit in any other module.\n\nimport { pickFuzzyResponse } from './fuzzy-responses';\n\nlet Fuse = require('fuse.js');\n\nexport const YesFuzzyValues = [\n    \"yes\",\n    \"yea\",\n    \"yeah\",\n    \"yeh\",\n    \"yah\",\n    \"yep\",\n    \"yup\",\n    \"aye\",\n    \"ok\",\n    \"okay\",\n    \"correct\",\n    \"true\",\n    \"sure\",\n    \"fine\",\n    \"absolutely\",\n    \"definitely\",\n    \"affirmative\",\n    \"of course\",\n    \"certainly\",\n    \"very well\",\n    \"indeed\",\n    \"surely\",\n    \"right\",\n    \"roger\",\n    \"it sure is\",\n    \"yes please\",\n    \"yes, please\",\n    \"heck yeah\",\n    \"sure thing\",\n    \"yes indeed\",\n    \"you bet\",\n    \"go ahead\",\n    \"why not\"\n];\n\nexport const NoFuzzyValues = [\n    \"no\",\n    \"nope\",\n    \"na\",\n    \"nah\",\n    \"not correct\",\n    \"incorrect\",\n    \"false\",\n    \"negative\",\n    \"no thankyou\",\n    \"no, thankyou\",\n    \"no, i'm good\",\n    \"no i'm good\"\n];\n\nexport const YesNoIntent = {\n    NO: 1,\n    YES: 2,\n    UNDEFINED: 3\n}\n\nfunction getYesIntentValue(value: string) {\n    let yesFuzzyValue = pickFuzzyResponse(value, YesFuzzyValues);\n    return yesFuzzyValue;\n}\n\nfunction getNoIntentValue(value: string) {\n    let noFuzzyValue = pickFuzzyResponse(value, NoFuzzyValues);\n    return noFuzzyValue;\n}\n\n// Returns an object that tells whether the given answer (string) is in the list of strings. If a list of items, \n// please give the key that will return the string in the item you want to match against.\nexport function isBestMatchInList(\n    givenAnswer: string, itemList: any, keyNameIfItemListNotAStrList: any, options: any) {\n\n    let minMatchLength = 1;\n\n    if(options && options.shortestWordMinMatchLength && givenAnswer) {\n        // Start off as a really big value\n        minMatchLength = 100;\n    }\n\n\tlet answerList = [];\n\tfor(let i = 0; i < itemList.length; i++) {\n\n\t\tlet strToMatch;\n\t\tif(!keyNameIfItemListNotAStrList) {\n\t\t\tstrToMatch = itemList[i];\n\t\t} else {\n\t\t\tstrToMatch = itemList[i][keyNameIfItemListNotAStrList];\n\t\t}\n\n\t\t// Remove question marks from string, because Alexa won't match those\n\t\tstrToMatch = strToMatch.replace(/\\?/ig, \"\");\n\n        answerList.push({answer: strToMatch, index: i});\n\n        // Do shortest word calculation here by looking at all possible answer sub words to find the shortest\n        if(options && options.shortestWordMinMatchLength) {\n\n            // Now match down to the shortest possible choice word that there is\n            if(strToMatch && strToMatch.length > 0) {\n                let subAnswerWords = strToMatch.split(\" \");\n                const MIN_POSSIBLE_LENGTH = 3; // Start off at 3 characters\n    \n                for(let word of subAnswerWords) {\n                    let wordLength = word.length;\n                    if(wordLength >= MIN_POSSIBLE_LENGTH && wordLength < minMatchLength) {\n                        minMatchLength = wordLength;\n                    }\n                }\n            }\n        }\n\t}\n\n\tlet fuseOptions = {\n\t  shouldSort: true,\n\t  includeScore: true,\n\t  threshold: 1.0,\n\t  location: 0,\n\t  distance: 1000,\n\t  maxPatternLength: 300,\n      minMatchCharLength: minMatchLength,\n\t  keys: [\n\t\t\"answer\"\n\t  ]\n    };\n    \n\tlet fuse = new Fuse(answerList, fuseOptions);\n\n\tlet fuseResult = fuse.search(givenAnswer);\n\n\tconsole.log(fuseResult);\n\t\n\tlet isInList = false;\n\t\n\tlet CORRECT_SCORE_THRESHOLD = 0.3;\n\n\tlet matchedIndex = -1;\n\tlet matchedName = \"\";\n\tlet matchedItem = undefined;\n\n\tif(fuseResult.length > 0) {\n\t\tconsole.log(\"Fuse Result\");\n\t\tconsole.log(fuseResult[0]);\n\n\t\tlet score = fuseResult[0].score;\n\t\t\n\t\tif(score <= CORRECT_SCORE_THRESHOLD) {\n\t\t\tisInList = true;\n\t\t\t\n\t\t\tmatchedIndex = fuseResult[0].item.index;\n\t\t\tmatchedName = fuseResult[0].item.answer;\n\t\t\tmatchedItem = itemList[matchedIndex];\n\t\t}\t\t\t\t\n    }\n    \n\treturn { isInList: isInList, matchedName: matchedName, matchedIndex: matchedIndex, matchedItem: matchedItem};\n}\n\nexport function reverseString(str: string) {\n    // Step 1. Use the split() method to return a new array\n    let splitString = str.split(\"\"); // let splitString = \"hello\".split(\"\");\n    // [\"h\", \"e\", \"l\", \"l\", \"o\"]\n \n    // Step 2. Use the reverse() method to reverse the new created array\n    let reverseArray = splitString.reverse(); // let reverseArray = [\"h\", \"e\", \"l\", \"l\", \"o\"].reverse();\n    // [\"o\", \"l\", \"l\", \"e\", \"h\"]\n \n    // Step 3. Use the join() method to join all elements of the array into a string\n    let joinArray = reverseArray.join(\"\"); // let joinArray = [\"o\", \"l\", \"l\", \"e\", \"h\"].join(\"\");\n    // \"olleh\"\n    \n    //Step 4. Return the reversed string\n    return joinArray; // \"olleh\"\n}\n\nexport function chooseRandomElement(arr: any[]) {\n\treturn arr[Math.floor(Math.random() * arr.length)];\n}\n\n// Wrap the index and item together in the response\nexport function chooseRandomElementWithIndex(arr: any[]) {\n\tlet index = Math.floor(Math.random() * arr.length); \n\treturn { item: arr[index],\n\t\t     index: index };\n}\n\nexport function capitalizeFirstLetter(str: string) {\n\n    if(!str || str.length < 1) {\n        return str;\n    }\n\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function escapeRegExp(str: string) {\n\treturn str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nexport function escapeStringForSSML(str: string) {\n\tif(!str) {\n\t\treturn \"\";\n\t}\n\n\t// Escape special characters not allowed in SSML\n\treturn str.replace(/&/g, \"&amp;\");\n}\n\nexport function wrapAudioTag(url: string) {\n    return \"<audio src='\" + url + \"' />\";\n}\n\nexport function arrayNotEmpty(arr: any[]) {\n\treturn arr && arr.length > 0;\n}\n\n// deprecated: use getYesNoIntentFromIntentSlot\nexport function getYesNoIntentFromAnswerIntent(handlerContext: any) {\n    if (handlerContext.event.request &&\n        handlerContext.event.request.intent &&\n        handlerContext.event.request.intent.slots &&\n        handlerContext.event.request.intent.slots.AnswerIntentSlot &&\n        handlerContext.event.request.intent.slots.AnswerIntentSlot.value) {\n        \n        if (getNoIntentValue(handlerContext.event.request.intent.slots.AnswerIntentSlot.value)) {\n            return YesNoIntent.NO;\n        } else if (getYesIntentValue(handlerContext.event.request.intent.slots.AnswerIntentSlot.value)) {\n            return YesNoIntent.YES;\n        }\n    }\n\n    return YesNoIntent.UNDEFINED;\n}\n\nexport function getYesNoIntentFromIntentSlot(handlerContext: any, intentSlot: any) {\n    if (handlerContext.event.request &&\n        handlerContext.event.request.intent &&\n        handlerContext.event.request.intent.slots &&\n        handlerContext.event.request.intent.slots[intentSlot] &&\n        handlerContext.event.request.intent.slots[intentSlot].value) {\n        \n        if (getNoIntentValue(handlerContext.event.request.intent.slots[intentSlot].value)) {\n            return YesNoIntent.NO;\n        } else if (getYesIntentValue(handlerContext.event.request.intent.slots[intentSlot].value)) {\n            return YesNoIntent.YES;\n        }\n    }\n\n    return YesNoIntent.UNDEFINED;\n}\n\n// Does the given slot contain a value\nexport function doesSlotContainValue(handlerContext: any, intentSlot: any) {\n    if (handlerContext.event.request &&\n        handlerContext.event.request.intent &&\n        handlerContext.event.request.intent.slots &&\n        handlerContext.event.request.intent.slots[intentSlot] &&\n        handlerContext.event.request.intent.slots[intentSlot].value) {        \n            return true;\n    }\n\n    return false;\n}\n\nlet runUnitTests = false;\nif(runUnitTests) {\n\tlet listOfStrings = ['hidden items', 'dont exist', 'in this list'];\n\t\n\t// Not in the list\n\tlet matchingResult = exports.isBestMatchInList(\"Whatever!!!\", listOfStrings);\n\tconsole.log(matchingResult);\n\n\t// Should best match to the list\n\tmatchingResult = exports.isBestMatchInList(\"is in this list\", listOfStrings);\n\tconsole.log(matchingResult);\n\t\n\tlet radarString = \"RaDar\";\n\tlet reverseStr = exports.reverseString(\"RaDar\");\n\tconsole.log(radarString + \" <-%-> \" + reverseStr);\n}\n\nexport function getCurrentTimestamp() {\n\treturn Math.floor(new Date().getTime() / 1000);\n}\n\nexport function getCurrentTimestampMS() {\n\treturn Math.floor(new Date().getTime());\n}\n\nexport function getMSSinceTimestamp(timestamp: number) {\n\treturn Math.floor(new Date().getTime()) - timestamp;\n}\n\nexport function getSecondsSinceTimestamp(timestamp: number) {\n\treturn Math.floor(new Date().getTime() / 1000) - timestamp;\n}\n\n// Check if a string is a number\nexport function isNumeric(num: any){\n    return !isNaN(num);\n}\n\nexport function getSessionUserId(event: any) {\n    let userId = '';\n\n    // Long-form audio enabled skills use event.context\n    if (event.context) {\n        userId = event.context.System.user.userId;\n    } else if (event.session) {\n        userId = event.session.user.userId;\n    }\n\n    return userId;\n}"]}