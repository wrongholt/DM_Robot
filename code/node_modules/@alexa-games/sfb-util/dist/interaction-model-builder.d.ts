import { BuiltInSlotType } from './constants';
export interface IBuiltInIntentBuilder {
    withSampleUtterance(sampleUtterance: string): IBuiltInIntentBuilder;
    withSampleUtterances(generateSampleUtterances: () => string[]): IBuiltInIntentBuilder;
}
export interface IBuiltInIntentsBuilder {
    thatUsesAudioPlayerInterface(): IBuiltInIntentsBuilder;
    thatUsesDisplayInterface(): IBuiltInIntentsBuilder;
    withCancelIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withHelpIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withStopIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withPauseIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withResumeIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withMoreIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withNavigateHomeIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withNavigateSettingsIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withNextIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withPageUpIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withPageDownIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withPreviousIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withScrollRightIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withScrollDownIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withScrollLeftIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withScrollUpIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withRepeatIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withYesIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withNoIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withStartOverIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withShuffleOnIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withShuffleOffIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withLoopOnIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withLoopOffIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
    withFallbackIntent(builtInIntentBuilderCallback?: (builtInIntentBuilder: IBuiltInIntentBuilder) => void): IBuiltInIntentsBuilder;
}
export interface IIntentBuilder {
    withIntentName(intentName: string): IIntentBuilder;
    withSlot(slotBuilderCallback: (slotBuilder: ISlotBuilder) => void): IIntentBuilder;
    withSampleUtterance(sampleUtterance: string): IIntentBuilder;
    withSampleUtterances(generateSampleUtterances: () => string[]): IIntentBuilder;
}
export interface ISlotBuilder {
    withSlotName(slotName: string): ISlotBuilder;
    withBuiltInSlotType(builtInSlotType: BuiltInSlotType): ISlotBuilder;
    withCustomSlotType(customSlotType: string): ISlotBuilder;
}
export interface ICustomSlotTypeBuilder {
    withCustomSlotTypeName(customSlotTypeName: string): ICustomSlotTypeBuilder;
    withCustomValues(generateCustomValues: () => string[]): ICustomSlotTypeBuilder;
}
export interface ICatchAllIntentBuilder {
    withCatchAllIntentName(intentName: string): ICatchAllIntentBuilder;
    withCatchAllSlotName(slotName: string): ICatchAllIntentBuilder;
    withCatchAllCustomSlotTypeName(slotTypeName: string): ICatchAllIntentBuilder;
    withCatchAllCustomValues(generateCustomValues: () => string[]): ICatchAllIntentBuilder;
    withRandomWordsAndPhrasesInCatchAllCustomValues(): ICatchAllIntentBuilder;
    withExceptionWordsInCatchAllCustomValues(): ICatchAllIntentBuilder;
    withExtraSlot(slotBuilderCallback: (slotBuilder: ISlotBuilder) => void): ICatchAllIntentBuilder;
    withExtraSampleUtterance(sampleUtterance: string): ICatchAllIntentBuilder;
}
export declare class InteractionModelBuilder {
    private invocationName?;
    private builtInIntentsBuilder;
    private intentBuilders;
    private customSlotTypeBuilders;
    private catchAllIntentBuilder?;
    withInvocationName(invocationName?: string | undefined): this;
    withBuiltInIntents(builtInIntentsBuilderCallback: (builtInIntentsBuilder: IBuiltInIntentsBuilder) => void): InteractionModelBuilder;
    withIntent(intentBuilderCallback: (intentBuilder: IIntentBuilder) => void): InteractionModelBuilder;
    withCustomSlotType(customSlotTypeBuilderCallback: (customSlotTypeBuilder: ICustomSlotTypeBuilder) => void): InteractionModelBuilder;
    withCatchAllIntent(catchAllIntentBuilderCallback: (catchAllIntentBuilder: ICatchAllIntentBuilder) => void): InteractionModelBuilder;
    build(): any;
}
